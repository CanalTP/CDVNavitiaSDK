import NavitiaSDK

@objc(CDVNavitiaSDK) class CDVNavitiaSDK : CDVPlugin {
    var sdk: Expert? = nil

    func anyToDateTime(_ value: Any) -> Date {
        let isoFormatter = DateFormatter()
        isoFormatter.dateFormat = "yyyy-MM-dd'T'HH:mm:ss.SSSZ"
        isoFormatter.locale = Locale(identifier: "en_US_POSIX")
        return isoFormatter.date(from: value as! String)!
    }

    func anyToBool(_ value: Any) -> Bool {
        return value as? Bool ?? false
    }

    func anyToInt(_ value: Any) -> Int32 {
        return value as? Int32 ?? 0
    }

    func anyToFloat(_ value: Any) -> Float {
        return value as? Float ?? 0
    }

    func anyToDouble(_ value: Any) -> Double {
        return value as? Double ?? 0
    }

    func anyToString(_ value: Any) -> String {
        return value as? String ?? ""
    }

    func arrayToEnum<T: RawRepresentable>(_ values: Any) -> [T] {
        let rawValues = values as! [Any]
        var values: [T]  = []
        rawValues.forEach({ rawValue in
            if let value = anyToEnum(rawValue) as T? {
                values.append(value)
            }
        })

        return values
    }

    func anyToEnum<T: RawRepresentable>(_ value: Any) -> T? {
        return T.init(rawValue: value as! T.RawValue)
    }

    func arrayToStringDict(_ values: Any) -> [String] {
        return values as? [String] ?? []
    }

    func arrayToIntDict(_ values: Any) -> [Int32] {
        return values as? [Int32] ?? []
    }

    @objc(init:)
    func `init`(command: CDVInvokedUrlCommand) {
        guard let arguments = command.arguments, let config = arguments[0] as? [String: Any] else {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "No valid plugin config")
            commandDelegate.send(pluginResult, callbackId: command.callbackId)
            return
        }

        guard let token = config["token"] as? String, !token.isEmpty else {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "No token provided")
            commandDelegate.send(pluginResult, callbackId: command.callbackId)
            return
        }

        let basePath = config["basePath"] as? String ?? ""
        if !basePath.isEmpty {
            NavitiaSDKAPI.basePath = basePath
        }

        self.sdk = Expert.init(configuration: NavitiaConfiguration.init(token: token))
        
        let message = String(format: "SDK initialized with token %@", token)
        let pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: message)
        commandDelegate.send(pluginResult, callbackId: command.callbackId)
    }

    @objc(coverageLonLatAddresses:)
    func coverageLonLatAddresses(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatAddressesRequestBuilder = sdk.addressesApi.newCoverageLonLatAddressesRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatAddressesId:)
    func coverageLonLatAddressesId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatAddressesIdRequestBuilder = sdk.addressesApi.newCoverageLonLatAddressesIdRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatUriAddresses:)
    func coverageLonLatUriAddresses(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatUriAddressesRequestBuilder = sdk.addressesApi.newCoverageLonLatUriAddressesRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatUriAddressesId:)
    func coverageLonLatUriAddressesId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatUriAddressesIdRequestBuilder = sdk.addressesApi.newCoverageLonLatUriAddressesIdRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionAddresses:)
    func coverageRegionAddresses(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionAddressesRequestBuilder = sdk.addressesApi.newCoverageRegionAddressesRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionAddressesId:)
    func coverageRegionAddressesId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionAddressesIdRequestBuilder = sdk.addressesApi.newCoverageRegionAddressesIdRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionUriAddresses:)
    func coverageRegionUriAddresses(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionUriAddressesRequestBuilder = sdk.addressesApi.newCoverageRegionUriAddressesRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionUriAddressesId:)
    func coverageRegionUriAddressesId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionUriAddressesIdRequestBuilder = sdk.addressesApi.newCoverageRegionUriAddressesIdRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatCalendars:)
    func coverageLonLatCalendars(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatCalendarsRequestBuilder = sdk.calendarsApi.newCoverageLonLatCalendarsRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "startDate") != nil {
                    _ = queryBuilder.withStartDate(anyToString(params!["startDate"]!))
                }
                if params?.index(forKey: "endDate") != nil {
                    _ = queryBuilder.withEndDate(anyToString(params!["endDate"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatCalendarsId:)
    func coverageLonLatCalendarsId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatCalendarsIdRequestBuilder = sdk.calendarsApi.newCoverageLonLatCalendarsIdRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "startDate") != nil {
                    _ = queryBuilder.withStartDate(anyToString(params!["startDate"]!))
                }
                if params?.index(forKey: "endDate") != nil {
                    _ = queryBuilder.withEndDate(anyToString(params!["endDate"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatUriCalendars:)
    func coverageLonLatUriCalendars(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatUriCalendarsRequestBuilder = sdk.calendarsApi.newCoverageLonLatUriCalendarsRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "startDate") != nil {
                    _ = queryBuilder.withStartDate(anyToString(params!["startDate"]!))
                }
                if params?.index(forKey: "endDate") != nil {
                    _ = queryBuilder.withEndDate(anyToString(params!["endDate"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionCalendars:)
    func coverageRegionCalendars(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionCalendarsRequestBuilder = sdk.calendarsApi.newCoverageRegionCalendarsRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "startDate") != nil {
                    _ = queryBuilder.withStartDate(anyToString(params!["startDate"]!))
                }
                if params?.index(forKey: "endDate") != nil {
                    _ = queryBuilder.withEndDate(anyToString(params!["endDate"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionCalendarsId:)
    func coverageRegionCalendarsId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionCalendarsIdRequestBuilder = sdk.calendarsApi.newCoverageRegionCalendarsIdRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "startDate") != nil {
                    _ = queryBuilder.withStartDate(anyToString(params!["startDate"]!))
                }
                if params?.index(forKey: "endDate") != nil {
                    _ = queryBuilder.withEndDate(anyToString(params!["endDate"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionUriCalendars:)
    func coverageRegionUriCalendars(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionUriCalendarsRequestBuilder = sdk.calendarsApi.newCoverageRegionUriCalendarsRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "startDate") != nil {
                    _ = queryBuilder.withStartDate(anyToString(params!["startDate"]!))
                }
                if params?.index(forKey: "endDate") != nil {
                    _ = queryBuilder.withEndDate(anyToString(params!["endDate"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatCommercialModes:)
    func coverageLonLatCommercialModes(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatCommercialModesRequestBuilder = sdk.commercialModesApi.newCoverageLonLatCommercialModesRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageLonLatCommercialModesRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageLonLatCommercialModesRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatCommercialModesId:)
    func coverageLonLatCommercialModesId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatCommercialModesIdRequestBuilder = sdk.commercialModesApi.newCoverageLonLatCommercialModesIdRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageLonLatCommercialModesIdRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageLonLatCommercialModesIdRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatUriCommercialModes:)
    func coverageLonLatUriCommercialModes(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatUriCommercialModesRequestBuilder = sdk.commercialModesApi.newCoverageLonLatUriCommercialModesRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageLonLatUriCommercialModesRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageLonLatUriCommercialModesRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatUriCommercialModesId:)
    func coverageLonLatUriCommercialModesId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatUriCommercialModesIdRequestBuilder = sdk.commercialModesApi.newCoverageLonLatUriCommercialModesIdRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageLonLatUriCommercialModesIdRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageLonLatUriCommercialModesIdRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionCommercialModes:)
    func coverageRegionCommercialModes(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionCommercialModesRequestBuilder = sdk.commercialModesApi.newCoverageRegionCommercialModesRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageRegionCommercialModesRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageRegionCommercialModesRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionCommercialModesId:)
    func coverageRegionCommercialModesId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionCommercialModesIdRequestBuilder = sdk.commercialModesApi.newCoverageRegionCommercialModesIdRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageRegionCommercialModesIdRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageRegionCommercialModesIdRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionUriCommercialModes:)
    func coverageRegionUriCommercialModes(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionUriCommercialModesRequestBuilder = sdk.commercialModesApi.newCoverageRegionUriCommercialModesRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageRegionUriCommercialModesRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageRegionUriCommercialModesRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionUriCommercialModesId:)
    func coverageRegionUriCommercialModesId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionUriCommercialModesIdRequestBuilder = sdk.commercialModesApi.newCoverageRegionUriCommercialModesIdRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageRegionUriCommercialModesIdRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageRegionUriCommercialModesIdRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatCompanies:)
    func coverageLonLatCompanies(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatCompaniesRequestBuilder = sdk.companiesApi.newCoverageLonLatCompaniesRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageLonLatCompaniesRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageLonLatCompaniesRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatCompaniesId:)
    func coverageLonLatCompaniesId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatCompaniesIdRequestBuilder = sdk.companiesApi.newCoverageLonLatCompaniesIdRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageLonLatCompaniesIdRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageLonLatCompaniesIdRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatUriCompanies:)
    func coverageLonLatUriCompanies(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatUriCompaniesRequestBuilder = sdk.companiesApi.newCoverageLonLatUriCompaniesRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageLonLatUriCompaniesRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageLonLatUriCompaniesRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatUriCompaniesId:)
    func coverageLonLatUriCompaniesId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatUriCompaniesIdRequestBuilder = sdk.companiesApi.newCoverageLonLatUriCompaniesIdRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageLonLatUriCompaniesIdRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageLonLatUriCompaniesIdRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionCompanies:)
    func coverageRegionCompanies(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionCompaniesRequestBuilder = sdk.companiesApi.newCoverageRegionCompaniesRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageRegionCompaniesRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageRegionCompaniesRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionCompaniesId:)
    func coverageRegionCompaniesId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionCompaniesIdRequestBuilder = sdk.companiesApi.newCoverageRegionCompaniesIdRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageRegionCompaniesIdRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageRegionCompaniesIdRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionUriCompanies:)
    func coverageRegionUriCompanies(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionUriCompaniesRequestBuilder = sdk.companiesApi.newCoverageRegionUriCompaniesRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageRegionUriCompaniesRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageRegionUriCompaniesRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionUriCompaniesId:)
    func coverageRegionUriCompaniesId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionUriCompaniesIdRequestBuilder = sdk.companiesApi.newCoverageRegionUriCompaniesIdRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageRegionUriCompaniesIdRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageRegionUriCompaniesIdRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatContributors:)
    func coverageLonLatContributors(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatContributorsRequestBuilder = sdk.contributorsApi.newCoverageLonLatContributorsRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageLonLatContributorsRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageLonLatContributorsRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatContributorsId:)
    func coverageLonLatContributorsId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatContributorsIdRequestBuilder = sdk.contributorsApi.newCoverageLonLatContributorsIdRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageLonLatContributorsIdRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageLonLatContributorsIdRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatUriContributors:)
    func coverageLonLatUriContributors(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatUriContributorsRequestBuilder = sdk.contributorsApi.newCoverageLonLatUriContributorsRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageLonLatUriContributorsRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageLonLatUriContributorsRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatUriContributorsId:)
    func coverageLonLatUriContributorsId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatUriContributorsIdRequestBuilder = sdk.contributorsApi.newCoverageLonLatUriContributorsIdRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageLonLatUriContributorsIdRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageLonLatUriContributorsIdRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionContributors:)
    func coverageRegionContributors(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionContributorsRequestBuilder = sdk.contributorsApi.newCoverageRegionContributorsRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageRegionContributorsRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageRegionContributorsRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionContributorsId:)
    func coverageRegionContributorsId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionContributorsIdRequestBuilder = sdk.contributorsApi.newCoverageRegionContributorsIdRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageRegionContributorsIdRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageRegionContributorsIdRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionUriContributors:)
    func coverageRegionUriContributors(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionUriContributorsRequestBuilder = sdk.contributorsApi.newCoverageRegionUriContributorsRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageRegionUriContributorsRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageRegionUriContributorsRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionUriContributorsId:)
    func coverageRegionUriContributorsId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionUriContributorsIdRequestBuilder = sdk.contributorsApi.newCoverageRegionUriContributorsIdRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageRegionUriContributorsIdRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageRegionUriContributorsIdRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coordLonLat:)
    func coordLonLat(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoordLonLatRequestBuilder = sdk.coordApi.newCoordLonLatRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coordsLonLat:)
    func coordsLonLat(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoordsLonLatRequestBuilder = sdk.coordApi.newCoordsLonLatRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionCoordLonLatAddresses:)
    func coverageRegionCoordLonLatAddresses(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionCoordLonLatAddressesRequestBuilder = sdk.coordApi.newCoverageRegionCoordLonLatAddressesRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionCoordsLonLatAddresses:)
    func coverageRegionCoordsLonLatAddresses(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionCoordsLonLatAddressesRequestBuilder = sdk.coordApi.newCoverageRegionCoordsLonLatAddressesRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatCoord:)
    func coverageLonLatCoord(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatCoordRequestBuilder = sdk.coordsApi.newCoverageLonLatCoordRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatCoordId:)
    func coverageLonLatCoordId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatCoordIdRequestBuilder = sdk.coordsApi.newCoverageLonLatCoordIdRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatCoords:)
    func coverageLonLatCoords(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatCoordsRequestBuilder = sdk.coordsApi.newCoverageLonLatCoordsRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatCoordsId:)
    func coverageLonLatCoordsId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatCoordsIdRequestBuilder = sdk.coordsApi.newCoverageLonLatCoordsIdRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatUriCoord:)
    func coverageLonLatUriCoord(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatUriCoordRequestBuilder = sdk.coordsApi.newCoverageLonLatUriCoordRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatUriCoordId:)
    func coverageLonLatUriCoordId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatUriCoordIdRequestBuilder = sdk.coordsApi.newCoverageLonLatUriCoordIdRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatUriCoords:)
    func coverageLonLatUriCoords(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatUriCoordsRequestBuilder = sdk.coordsApi.newCoverageLonLatUriCoordsRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatUriCoordsId:)
    func coverageLonLatUriCoordsId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatUriCoordsIdRequestBuilder = sdk.coordsApi.newCoverageLonLatUriCoordsIdRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionCoord:)
    func coverageRegionCoord(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionCoordRequestBuilder = sdk.coordsApi.newCoverageRegionCoordRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionCoordId:)
    func coverageRegionCoordId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionCoordIdRequestBuilder = sdk.coordsApi.newCoverageRegionCoordIdRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionCoords:)
    func coverageRegionCoords(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionCoordsRequestBuilder = sdk.coordsApi.newCoverageRegionCoordsRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionCoordsId:)
    func coverageRegionCoordsId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionCoordsIdRequestBuilder = sdk.coordsApi.newCoverageRegionCoordsIdRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionUriCoord:)
    func coverageRegionUriCoord(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionUriCoordRequestBuilder = sdk.coordsApi.newCoverageRegionUriCoordRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionUriCoordId:)
    func coverageRegionUriCoordId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionUriCoordIdRequestBuilder = sdk.coordsApi.newCoverageRegionUriCoordIdRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionUriCoords:)
    func coverageRegionUriCoords(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionUriCoordsRequestBuilder = sdk.coordsApi.newCoverageRegionUriCoordsRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionUriCoordsId:)
    func coverageRegionUriCoordsId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionUriCoordsIdRequestBuilder = sdk.coordsApi.newCoverageRegionUriCoordsIdRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverage:)
    func coverage(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRequestBuilder = sdk.coverageApi.newCoverageRequestBuilder();

                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLat:)
    func coverageLonLat(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatRequestBuilder = sdk.coverageApi.newCoverageLonLatRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegion:)
    func coverageRegion(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionRequestBuilder = sdk.coverageApi.newCoverageRegionRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatDatasets:)
    func coverageLonLatDatasets(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatDatasetsRequestBuilder = sdk.datasetsApi.newCoverageLonLatDatasetsRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageLonLatDatasetsRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageLonLatDatasetsRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatDatasetsId:)
    func coverageLonLatDatasetsId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatDatasetsIdRequestBuilder = sdk.datasetsApi.newCoverageLonLatDatasetsIdRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageLonLatDatasetsIdRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageLonLatDatasetsIdRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatUriDatasets:)
    func coverageLonLatUriDatasets(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatUriDatasetsRequestBuilder = sdk.datasetsApi.newCoverageLonLatUriDatasetsRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageLonLatUriDatasetsRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageLonLatUriDatasetsRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatUriDatasetsId:)
    func coverageLonLatUriDatasetsId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatUriDatasetsIdRequestBuilder = sdk.datasetsApi.newCoverageLonLatUriDatasetsIdRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageLonLatUriDatasetsIdRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageLonLatUriDatasetsIdRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionDatasets:)
    func coverageRegionDatasets(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionDatasetsRequestBuilder = sdk.datasetsApi.newCoverageRegionDatasetsRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageRegionDatasetsRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageRegionDatasetsRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionDatasetsId:)
    func coverageRegionDatasetsId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionDatasetsIdRequestBuilder = sdk.datasetsApi.newCoverageRegionDatasetsIdRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageRegionDatasetsIdRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageRegionDatasetsIdRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionUriDatasets:)
    func coverageRegionUriDatasets(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionUriDatasetsRequestBuilder = sdk.datasetsApi.newCoverageRegionUriDatasetsRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageRegionUriDatasetsRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageRegionUriDatasetsRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionUriDatasetsId:)
    func coverageRegionUriDatasetsId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionUriDatasetsIdRequestBuilder = sdk.datasetsApi.newCoverageRegionUriDatasetsIdRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageRegionUriDatasetsIdRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageRegionUriDatasetsIdRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatDisruptions:)
    func coverageLonLatDisruptions(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatDisruptionsRequestBuilder = sdk.disruptionsApi.newCoverageLonLatDisruptionsRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageLonLatDisruptionsRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageLonLatDisruptionsRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }
                if params?.index(forKey: "originalId") != nil {
                    _ = queryBuilder.withOriginalId(anyToString(params!["originalId"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatDisruptionsId:)
    func coverageLonLatDisruptionsId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatDisruptionsIdRequestBuilder = sdk.disruptionsApi.newCoverageLonLatDisruptionsIdRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageLonLatDisruptionsIdRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageLonLatDisruptionsIdRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }
                if params?.index(forKey: "originalId") != nil {
                    _ = queryBuilder.withOriginalId(anyToString(params!["originalId"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatUriDisruptions:)
    func coverageLonLatUriDisruptions(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatUriDisruptionsRequestBuilder = sdk.disruptionsApi.newCoverageLonLatUriDisruptionsRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageLonLatUriDisruptionsRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageLonLatUriDisruptionsRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }
                if params?.index(forKey: "originalId") != nil {
                    _ = queryBuilder.withOriginalId(anyToString(params!["originalId"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatUriDisruptionsId:)
    func coverageLonLatUriDisruptionsId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatUriDisruptionsIdRequestBuilder = sdk.disruptionsApi.newCoverageLonLatUriDisruptionsIdRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageLonLatUriDisruptionsIdRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageLonLatUriDisruptionsIdRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }
                if params?.index(forKey: "originalId") != nil {
                    _ = queryBuilder.withOriginalId(anyToString(params!["originalId"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionDisruptions:)
    func coverageRegionDisruptions(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionDisruptionsRequestBuilder = sdk.disruptionsApi.newCoverageRegionDisruptionsRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageRegionDisruptionsRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageRegionDisruptionsRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }
                if params?.index(forKey: "originalId") != nil {
                    _ = queryBuilder.withOriginalId(anyToString(params!["originalId"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionDisruptionsId:)
    func coverageRegionDisruptionsId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionDisruptionsIdRequestBuilder = sdk.disruptionsApi.newCoverageRegionDisruptionsIdRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageRegionDisruptionsIdRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageRegionDisruptionsIdRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }
                if params?.index(forKey: "originalId") != nil {
                    _ = queryBuilder.withOriginalId(anyToString(params!["originalId"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionUriDisruptions:)
    func coverageRegionUriDisruptions(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionUriDisruptionsRequestBuilder = sdk.disruptionsApi.newCoverageRegionUriDisruptionsRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageRegionUriDisruptionsRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageRegionUriDisruptionsRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }
                if params?.index(forKey: "originalId") != nil {
                    _ = queryBuilder.withOriginalId(anyToString(params!["originalId"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionUriDisruptionsId:)
    func coverageRegionUriDisruptionsId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionUriDisruptionsIdRequestBuilder = sdk.disruptionsApi.newCoverageRegionUriDisruptionsIdRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageRegionUriDisruptionsIdRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageRegionUriDisruptionsIdRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }
                if params?.index(forKey: "originalId") != nil {
                    _ = queryBuilder.withOriginalId(anyToString(params!["originalId"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coordLonLatEquipmentReports:)
    func coordLonLatEquipmentReports(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoordLonLatEquipmentReportsRequestBuilder = sdk.equipmentReportsApi.newCoordLonLatEquipmentReportsRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coordsLonLatEquipmentReports:)
    func coordsLonLatEquipmentReports(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoordsLonLatEquipmentReportsRequestBuilder = sdk.equipmentReportsApi.newCoordsLonLatEquipmentReportsRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatEquipmentReports:)
    func coverageLonLatEquipmentReports(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatEquipmentReportsRequestBuilder = sdk.equipmentReportsApi.newCoverageLonLatEquipmentReportsRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatUriEquipmentReports:)
    func coverageLonLatUriEquipmentReports(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatUriEquipmentReportsRequestBuilder = sdk.equipmentReportsApi.newCoverageLonLatUriEquipmentReportsRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionEquipmentReports:)
    func coverageRegionEquipmentReports(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionEquipmentReportsRequestBuilder = sdk.equipmentReportsApi.newCoverageRegionEquipmentReportsRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionUriEquipmentReports:)
    func coverageRegionUriEquipmentReports(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionUriEquipmentReportsRequestBuilder = sdk.equipmentReportsApi.newCoverageRegionUriEquipmentReportsRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatGeoStatus:)
    func coverageLonLatGeoStatus(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatGeoStatusRequestBuilder = sdk.geoStatusApi.newCoverageLonLatGeoStatusRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionGeoStatus:)
    func coverageRegionGeoStatus(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionGeoStatusRequestBuilder = sdk.geoStatusApi.newCoverageRegionGeoStatusRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatIsochrones:)
    func coverageLonLatIsochrones(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatIsochronesRequestBuilder = sdk.graphicalIsochroneApi.newCoverageLonLatIsochronesRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "from") != nil {
                    _ = queryBuilder.withFrom(anyToString(params!["from"]!))
                }
                if params?.index(forKey: "to") != nil {
                    _ = queryBuilder.withTo(anyToString(params!["to"]!))
                }
                if params?.index(forKey: "datetime") != nil {
                    _ = queryBuilder.withDatetime(anyToDateTime(params!["datetime"]!))
                }
                if params?.index(forKey: "datetimeRepresents") != nil {
                    if let enumValue = anyToEnum(params!["datetimeRepresents"]!) as CoverageLonLatIsochronesRequestBuilder.DatetimeRepresents? {
                        _ = queryBuilder.withDatetimeRepresents(enumValue)
                    }
                }
                if params?.index(forKey: "maxNbTransfers") != nil {
                    _ = queryBuilder.withMaxNbTransfers(anyToInt(params!["maxNbTransfers"]!))
                }
                if params?.index(forKey: "minNbTransfers") != nil {
                    _ = queryBuilder.withMinNbTransfers(anyToInt(params!["minNbTransfers"]!))
                }
                if params?.index(forKey: "firstSectionMode") != nil {
                    _ = queryBuilder.withFirstSectionMode(arrayToEnum(params!["firstSectionMode"]!) as [CoverageLonLatIsochronesRequestBuilder.FirstSectionMode])
                }
                if params?.index(forKey: "lastSectionMode") != nil {
                    _ = queryBuilder.withLastSectionMode(arrayToEnum(params!["lastSectionMode"]!) as [CoverageLonLatIsochronesRequestBuilder.LastSectionMode])
                }
                if params?.index(forKey: "maxDurationToPt") != nil {
                    _ = queryBuilder.withMaxDurationToPt(anyToInt(params!["maxDurationToPt"]!))
                }
                if params?.index(forKey: "maxWalkingDurationToPt") != nil {
                    _ = queryBuilder.withMaxWalkingDurationToPt(anyToInt(params!["maxWalkingDurationToPt"]!))
                }
                if params?.index(forKey: "maxBikeDurationToPt") != nil {
                    _ = queryBuilder.withMaxBikeDurationToPt(anyToInt(params!["maxBikeDurationToPt"]!))
                }
                if params?.index(forKey: "maxBssDurationToPt") != nil {
                    _ = queryBuilder.withMaxBssDurationToPt(anyToInt(params!["maxBssDurationToPt"]!))
                }
                if params?.index(forKey: "maxCarDurationToPt") != nil {
                    _ = queryBuilder.withMaxCarDurationToPt(anyToInt(params!["maxCarDurationToPt"]!))
                }
                if params?.index(forKey: "maxRidesharingDurationToPt") != nil {
                    _ = queryBuilder.withMaxRidesharingDurationToPt(anyToInt(params!["maxRidesharingDurationToPt"]!))
                }
                if params?.index(forKey: "maxCarNoParkDurationToPt") != nil {
                    _ = queryBuilder.withMaxCarNoParkDurationToPt(anyToInt(params!["maxCarNoParkDurationToPt"]!))
                }
                if params?.index(forKey: "maxTaxiDurationToPt") != nil {
                    _ = queryBuilder.withMaxTaxiDurationToPt(anyToInt(params!["maxTaxiDurationToPt"]!))
                }
                if params?.index(forKey: "walkingSpeed") != nil {
                    _ = queryBuilder.withWalkingSpeed(anyToFloat(params!["walkingSpeed"]!))
                }
                if params?.index(forKey: "bikeSpeed") != nil {
                    _ = queryBuilder.withBikeSpeed(anyToFloat(params!["bikeSpeed"]!))
                }
                if params?.index(forKey: "bssSpeed") != nil {
                    _ = queryBuilder.withBssSpeed(anyToFloat(params!["bssSpeed"]!))
                }
                if params?.index(forKey: "carSpeed") != nil {
                    _ = queryBuilder.withCarSpeed(anyToFloat(params!["carSpeed"]!))
                }
                if params?.index(forKey: "ridesharingSpeed") != nil {
                    _ = queryBuilder.withRidesharingSpeed(anyToFloat(params!["ridesharingSpeed"]!))
                }
                if params?.index(forKey: "carNoParkSpeed") != nil {
                    _ = queryBuilder.withCarNoParkSpeed(anyToFloat(params!["carNoParkSpeed"]!))
                }
                if params?.index(forKey: "taxiSpeed") != nil {
                    _ = queryBuilder.withTaxiSpeed(anyToFloat(params!["taxiSpeed"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "allowedId") != nil {
                    _ = queryBuilder.withAllowedId(arrayToStringDict(params!["allowedId"]!))
                }
                if params?.index(forKey: "disruptionActive") != nil {
                    _ = queryBuilder.withDisruptionActive(anyToBool(params!["disruptionActive"]!))
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageLonLatIsochronesRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "maxDuration") != nil {
                    _ = queryBuilder.withMaxDuration(anyToInt(params!["maxDuration"]!))
                }
                if params?.index(forKey: "wheelchair") != nil {
                    _ = queryBuilder.withWheelchair(anyToBool(params!["wheelchair"]!))
                }
                if params?.index(forKey: "travelerType") != nil {
                    if let enumValue = anyToEnum(params!["travelerType"]!) as CoverageLonLatIsochronesRequestBuilder.TravelerType? {
                        _ = queryBuilder.withTravelerType(enumValue)
                    }
                }
                if params?.index(forKey: "directPath") != nil {
                    if let enumValue = anyToEnum(params!["directPath"]!) as CoverageLonLatIsochronesRequestBuilder.DirectPath? {
                        _ = queryBuilder.withDirectPath(enumValue)
                    }
                }
                if params?.index(forKey: "freeRadiusFrom") != nil {
                    _ = queryBuilder.withFreeRadiusFrom(anyToInt(params!["freeRadiusFrom"]!))
                }
                if params?.index(forKey: "freeRadiusTo") != nil {
                    _ = queryBuilder.withFreeRadiusTo(anyToInt(params!["freeRadiusTo"]!))
                }
                if params?.index(forKey: "directPathMode") != nil {
                    _ = queryBuilder.withDirectPathMode(arrayToEnum(params!["directPathMode"]!) as [CoverageLonLatIsochronesRequestBuilder.DirectPathMode])
                }
                if params?.index(forKey: "partnerServices") != nil {
                    _ = queryBuilder.withPartnerServices(arrayToEnum(params!["partnerServices"]!) as [CoverageLonLatIsochronesRequestBuilder.PartnerServices])
                }
                if params?.index(forKey: "minDuration") != nil {
                    _ = queryBuilder.withMinDuration(anyToInt(params!["minDuration"]!))
                }
                if params?.index(forKey: "boundaryDuration") != nil {
                    _ = queryBuilder.withBoundaryDuration(arrayToIntDict(params!["boundaryDuration"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionIsochrones:)
    func coverageRegionIsochrones(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionIsochronesRequestBuilder = sdk.graphicalIsochroneApi.newCoverageRegionIsochronesRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "from") != nil {
                    _ = queryBuilder.withFrom(anyToString(params!["from"]!))
                }
                if params?.index(forKey: "to") != nil {
                    _ = queryBuilder.withTo(anyToString(params!["to"]!))
                }
                if params?.index(forKey: "datetime") != nil {
                    _ = queryBuilder.withDatetime(anyToDateTime(params!["datetime"]!))
                }
                if params?.index(forKey: "datetimeRepresents") != nil {
                    if let enumValue = anyToEnum(params!["datetimeRepresents"]!) as CoverageRegionIsochronesRequestBuilder.DatetimeRepresents? {
                        _ = queryBuilder.withDatetimeRepresents(enumValue)
                    }
                }
                if params?.index(forKey: "maxNbTransfers") != nil {
                    _ = queryBuilder.withMaxNbTransfers(anyToInt(params!["maxNbTransfers"]!))
                }
                if params?.index(forKey: "minNbTransfers") != nil {
                    _ = queryBuilder.withMinNbTransfers(anyToInt(params!["minNbTransfers"]!))
                }
                if params?.index(forKey: "firstSectionMode") != nil {
                    _ = queryBuilder.withFirstSectionMode(arrayToEnum(params!["firstSectionMode"]!) as [CoverageRegionIsochronesRequestBuilder.FirstSectionMode])
                }
                if params?.index(forKey: "lastSectionMode") != nil {
                    _ = queryBuilder.withLastSectionMode(arrayToEnum(params!["lastSectionMode"]!) as [CoverageRegionIsochronesRequestBuilder.LastSectionMode])
                }
                if params?.index(forKey: "maxDurationToPt") != nil {
                    _ = queryBuilder.withMaxDurationToPt(anyToInt(params!["maxDurationToPt"]!))
                }
                if params?.index(forKey: "maxWalkingDurationToPt") != nil {
                    _ = queryBuilder.withMaxWalkingDurationToPt(anyToInt(params!["maxWalkingDurationToPt"]!))
                }
                if params?.index(forKey: "maxBikeDurationToPt") != nil {
                    _ = queryBuilder.withMaxBikeDurationToPt(anyToInt(params!["maxBikeDurationToPt"]!))
                }
                if params?.index(forKey: "maxBssDurationToPt") != nil {
                    _ = queryBuilder.withMaxBssDurationToPt(anyToInt(params!["maxBssDurationToPt"]!))
                }
                if params?.index(forKey: "maxCarDurationToPt") != nil {
                    _ = queryBuilder.withMaxCarDurationToPt(anyToInt(params!["maxCarDurationToPt"]!))
                }
                if params?.index(forKey: "maxRidesharingDurationToPt") != nil {
                    _ = queryBuilder.withMaxRidesharingDurationToPt(anyToInt(params!["maxRidesharingDurationToPt"]!))
                }
                if params?.index(forKey: "maxCarNoParkDurationToPt") != nil {
                    _ = queryBuilder.withMaxCarNoParkDurationToPt(anyToInt(params!["maxCarNoParkDurationToPt"]!))
                }
                if params?.index(forKey: "maxTaxiDurationToPt") != nil {
                    _ = queryBuilder.withMaxTaxiDurationToPt(anyToInt(params!["maxTaxiDurationToPt"]!))
                }
                if params?.index(forKey: "walkingSpeed") != nil {
                    _ = queryBuilder.withWalkingSpeed(anyToFloat(params!["walkingSpeed"]!))
                }
                if params?.index(forKey: "bikeSpeed") != nil {
                    _ = queryBuilder.withBikeSpeed(anyToFloat(params!["bikeSpeed"]!))
                }
                if params?.index(forKey: "bssSpeed") != nil {
                    _ = queryBuilder.withBssSpeed(anyToFloat(params!["bssSpeed"]!))
                }
                if params?.index(forKey: "carSpeed") != nil {
                    _ = queryBuilder.withCarSpeed(anyToFloat(params!["carSpeed"]!))
                }
                if params?.index(forKey: "ridesharingSpeed") != nil {
                    _ = queryBuilder.withRidesharingSpeed(anyToFloat(params!["ridesharingSpeed"]!))
                }
                if params?.index(forKey: "carNoParkSpeed") != nil {
                    _ = queryBuilder.withCarNoParkSpeed(anyToFloat(params!["carNoParkSpeed"]!))
                }
                if params?.index(forKey: "taxiSpeed") != nil {
                    _ = queryBuilder.withTaxiSpeed(anyToFloat(params!["taxiSpeed"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "allowedId") != nil {
                    _ = queryBuilder.withAllowedId(arrayToStringDict(params!["allowedId"]!))
                }
                if params?.index(forKey: "disruptionActive") != nil {
                    _ = queryBuilder.withDisruptionActive(anyToBool(params!["disruptionActive"]!))
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageRegionIsochronesRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "maxDuration") != nil {
                    _ = queryBuilder.withMaxDuration(anyToInt(params!["maxDuration"]!))
                }
                if params?.index(forKey: "wheelchair") != nil {
                    _ = queryBuilder.withWheelchair(anyToBool(params!["wheelchair"]!))
                }
                if params?.index(forKey: "travelerType") != nil {
                    if let enumValue = anyToEnum(params!["travelerType"]!) as CoverageRegionIsochronesRequestBuilder.TravelerType? {
                        _ = queryBuilder.withTravelerType(enumValue)
                    }
                }
                if params?.index(forKey: "directPath") != nil {
                    if let enumValue = anyToEnum(params!["directPath"]!) as CoverageRegionIsochronesRequestBuilder.DirectPath? {
                        _ = queryBuilder.withDirectPath(enumValue)
                    }
                }
                if params?.index(forKey: "freeRadiusFrom") != nil {
                    _ = queryBuilder.withFreeRadiusFrom(anyToInt(params!["freeRadiusFrom"]!))
                }
                if params?.index(forKey: "freeRadiusTo") != nil {
                    _ = queryBuilder.withFreeRadiusTo(anyToInt(params!["freeRadiusTo"]!))
                }
                if params?.index(forKey: "directPathMode") != nil {
                    _ = queryBuilder.withDirectPathMode(arrayToEnum(params!["directPathMode"]!) as [CoverageRegionIsochronesRequestBuilder.DirectPathMode])
                }
                if params?.index(forKey: "partnerServices") != nil {
                    _ = queryBuilder.withPartnerServices(arrayToEnum(params!["partnerServices"]!) as [CoverageRegionIsochronesRequestBuilder.PartnerServices])
                }
                if params?.index(forKey: "minDuration") != nil {
                    _ = queryBuilder.withMinDuration(anyToInt(params!["minDuration"]!))
                }
                if params?.index(forKey: "boundaryDuration") != nil {
                    _ = queryBuilder.withBoundaryDuration(arrayToIntDict(params!["boundaryDuration"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatHeatMaps:)
    func coverageLonLatHeatMaps(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatHeatMapsRequestBuilder = sdk.heatMapApi.newCoverageLonLatHeatMapsRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "from") != nil {
                    _ = queryBuilder.withFrom(anyToString(params!["from"]!))
                }
                if params?.index(forKey: "to") != nil {
                    _ = queryBuilder.withTo(anyToString(params!["to"]!))
                }
                if params?.index(forKey: "datetime") != nil {
                    _ = queryBuilder.withDatetime(anyToDateTime(params!["datetime"]!))
                }
                if params?.index(forKey: "datetimeRepresents") != nil {
                    if let enumValue = anyToEnum(params!["datetimeRepresents"]!) as CoverageLonLatHeatMapsRequestBuilder.DatetimeRepresents? {
                        _ = queryBuilder.withDatetimeRepresents(enumValue)
                    }
                }
                if params?.index(forKey: "maxNbTransfers") != nil {
                    _ = queryBuilder.withMaxNbTransfers(anyToInt(params!["maxNbTransfers"]!))
                }
                if params?.index(forKey: "minNbTransfers") != nil {
                    _ = queryBuilder.withMinNbTransfers(anyToInt(params!["minNbTransfers"]!))
                }
                if params?.index(forKey: "firstSectionMode") != nil {
                    _ = queryBuilder.withFirstSectionMode(arrayToEnum(params!["firstSectionMode"]!) as [CoverageLonLatHeatMapsRequestBuilder.FirstSectionMode])
                }
                if params?.index(forKey: "lastSectionMode") != nil {
                    _ = queryBuilder.withLastSectionMode(arrayToEnum(params!["lastSectionMode"]!) as [CoverageLonLatHeatMapsRequestBuilder.LastSectionMode])
                }
                if params?.index(forKey: "maxDurationToPt") != nil {
                    _ = queryBuilder.withMaxDurationToPt(anyToInt(params!["maxDurationToPt"]!))
                }
                if params?.index(forKey: "maxWalkingDurationToPt") != nil {
                    _ = queryBuilder.withMaxWalkingDurationToPt(anyToInt(params!["maxWalkingDurationToPt"]!))
                }
                if params?.index(forKey: "maxBikeDurationToPt") != nil {
                    _ = queryBuilder.withMaxBikeDurationToPt(anyToInt(params!["maxBikeDurationToPt"]!))
                }
                if params?.index(forKey: "maxBssDurationToPt") != nil {
                    _ = queryBuilder.withMaxBssDurationToPt(anyToInt(params!["maxBssDurationToPt"]!))
                }
                if params?.index(forKey: "maxCarDurationToPt") != nil {
                    _ = queryBuilder.withMaxCarDurationToPt(anyToInt(params!["maxCarDurationToPt"]!))
                }
                if params?.index(forKey: "maxRidesharingDurationToPt") != nil {
                    _ = queryBuilder.withMaxRidesharingDurationToPt(anyToInt(params!["maxRidesharingDurationToPt"]!))
                }
                if params?.index(forKey: "maxCarNoParkDurationToPt") != nil {
                    _ = queryBuilder.withMaxCarNoParkDurationToPt(anyToInt(params!["maxCarNoParkDurationToPt"]!))
                }
                if params?.index(forKey: "maxTaxiDurationToPt") != nil {
                    _ = queryBuilder.withMaxTaxiDurationToPt(anyToInt(params!["maxTaxiDurationToPt"]!))
                }
                if params?.index(forKey: "walkingSpeed") != nil {
                    _ = queryBuilder.withWalkingSpeed(anyToFloat(params!["walkingSpeed"]!))
                }
                if params?.index(forKey: "bikeSpeed") != nil {
                    _ = queryBuilder.withBikeSpeed(anyToFloat(params!["bikeSpeed"]!))
                }
                if params?.index(forKey: "bssSpeed") != nil {
                    _ = queryBuilder.withBssSpeed(anyToFloat(params!["bssSpeed"]!))
                }
                if params?.index(forKey: "carSpeed") != nil {
                    _ = queryBuilder.withCarSpeed(anyToFloat(params!["carSpeed"]!))
                }
                if params?.index(forKey: "ridesharingSpeed") != nil {
                    _ = queryBuilder.withRidesharingSpeed(anyToFloat(params!["ridesharingSpeed"]!))
                }
                if params?.index(forKey: "carNoParkSpeed") != nil {
                    _ = queryBuilder.withCarNoParkSpeed(anyToFloat(params!["carNoParkSpeed"]!))
                }
                if params?.index(forKey: "taxiSpeed") != nil {
                    _ = queryBuilder.withTaxiSpeed(anyToFloat(params!["taxiSpeed"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "allowedId") != nil {
                    _ = queryBuilder.withAllowedId(arrayToStringDict(params!["allowedId"]!))
                }
                if params?.index(forKey: "disruptionActive") != nil {
                    _ = queryBuilder.withDisruptionActive(anyToBool(params!["disruptionActive"]!))
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageLonLatHeatMapsRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "maxDuration") != nil {
                    _ = queryBuilder.withMaxDuration(anyToInt(params!["maxDuration"]!))
                }
                if params?.index(forKey: "wheelchair") != nil {
                    _ = queryBuilder.withWheelchair(anyToBool(params!["wheelchair"]!))
                }
                if params?.index(forKey: "travelerType") != nil {
                    if let enumValue = anyToEnum(params!["travelerType"]!) as CoverageLonLatHeatMapsRequestBuilder.TravelerType? {
                        _ = queryBuilder.withTravelerType(enumValue)
                    }
                }
                if params?.index(forKey: "directPath") != nil {
                    if let enumValue = anyToEnum(params!["directPath"]!) as CoverageLonLatHeatMapsRequestBuilder.DirectPath? {
                        _ = queryBuilder.withDirectPath(enumValue)
                    }
                }
                if params?.index(forKey: "freeRadiusFrom") != nil {
                    _ = queryBuilder.withFreeRadiusFrom(anyToInt(params!["freeRadiusFrom"]!))
                }
                if params?.index(forKey: "freeRadiusTo") != nil {
                    _ = queryBuilder.withFreeRadiusTo(anyToInt(params!["freeRadiusTo"]!))
                }
                if params?.index(forKey: "directPathMode") != nil {
                    _ = queryBuilder.withDirectPathMode(arrayToEnum(params!["directPathMode"]!) as [CoverageLonLatHeatMapsRequestBuilder.DirectPathMode])
                }
                if params?.index(forKey: "partnerServices") != nil {
                    _ = queryBuilder.withPartnerServices(arrayToEnum(params!["partnerServices"]!) as [CoverageLonLatHeatMapsRequestBuilder.PartnerServices])
                }
                if params?.index(forKey: "resolution") != nil {
                    _ = queryBuilder.withResolution(anyToInt(params!["resolution"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionHeatMaps:)
    func coverageRegionHeatMaps(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionHeatMapsRequestBuilder = sdk.heatMapApi.newCoverageRegionHeatMapsRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "from") != nil {
                    _ = queryBuilder.withFrom(anyToString(params!["from"]!))
                }
                if params?.index(forKey: "to") != nil {
                    _ = queryBuilder.withTo(anyToString(params!["to"]!))
                }
                if params?.index(forKey: "datetime") != nil {
                    _ = queryBuilder.withDatetime(anyToDateTime(params!["datetime"]!))
                }
                if params?.index(forKey: "datetimeRepresents") != nil {
                    if let enumValue = anyToEnum(params!["datetimeRepresents"]!) as CoverageRegionHeatMapsRequestBuilder.DatetimeRepresents? {
                        _ = queryBuilder.withDatetimeRepresents(enumValue)
                    }
                }
                if params?.index(forKey: "maxNbTransfers") != nil {
                    _ = queryBuilder.withMaxNbTransfers(anyToInt(params!["maxNbTransfers"]!))
                }
                if params?.index(forKey: "minNbTransfers") != nil {
                    _ = queryBuilder.withMinNbTransfers(anyToInt(params!["minNbTransfers"]!))
                }
                if params?.index(forKey: "firstSectionMode") != nil {
                    _ = queryBuilder.withFirstSectionMode(arrayToEnum(params!["firstSectionMode"]!) as [CoverageRegionHeatMapsRequestBuilder.FirstSectionMode])
                }
                if params?.index(forKey: "lastSectionMode") != nil {
                    _ = queryBuilder.withLastSectionMode(arrayToEnum(params!["lastSectionMode"]!) as [CoverageRegionHeatMapsRequestBuilder.LastSectionMode])
                }
                if params?.index(forKey: "maxDurationToPt") != nil {
                    _ = queryBuilder.withMaxDurationToPt(anyToInt(params!["maxDurationToPt"]!))
                }
                if params?.index(forKey: "maxWalkingDurationToPt") != nil {
                    _ = queryBuilder.withMaxWalkingDurationToPt(anyToInt(params!["maxWalkingDurationToPt"]!))
                }
                if params?.index(forKey: "maxBikeDurationToPt") != nil {
                    _ = queryBuilder.withMaxBikeDurationToPt(anyToInt(params!["maxBikeDurationToPt"]!))
                }
                if params?.index(forKey: "maxBssDurationToPt") != nil {
                    _ = queryBuilder.withMaxBssDurationToPt(anyToInt(params!["maxBssDurationToPt"]!))
                }
                if params?.index(forKey: "maxCarDurationToPt") != nil {
                    _ = queryBuilder.withMaxCarDurationToPt(anyToInt(params!["maxCarDurationToPt"]!))
                }
                if params?.index(forKey: "maxRidesharingDurationToPt") != nil {
                    _ = queryBuilder.withMaxRidesharingDurationToPt(anyToInt(params!["maxRidesharingDurationToPt"]!))
                }
                if params?.index(forKey: "maxCarNoParkDurationToPt") != nil {
                    _ = queryBuilder.withMaxCarNoParkDurationToPt(anyToInt(params!["maxCarNoParkDurationToPt"]!))
                }
                if params?.index(forKey: "maxTaxiDurationToPt") != nil {
                    _ = queryBuilder.withMaxTaxiDurationToPt(anyToInt(params!["maxTaxiDurationToPt"]!))
                }
                if params?.index(forKey: "walkingSpeed") != nil {
                    _ = queryBuilder.withWalkingSpeed(anyToFloat(params!["walkingSpeed"]!))
                }
                if params?.index(forKey: "bikeSpeed") != nil {
                    _ = queryBuilder.withBikeSpeed(anyToFloat(params!["bikeSpeed"]!))
                }
                if params?.index(forKey: "bssSpeed") != nil {
                    _ = queryBuilder.withBssSpeed(anyToFloat(params!["bssSpeed"]!))
                }
                if params?.index(forKey: "carSpeed") != nil {
                    _ = queryBuilder.withCarSpeed(anyToFloat(params!["carSpeed"]!))
                }
                if params?.index(forKey: "ridesharingSpeed") != nil {
                    _ = queryBuilder.withRidesharingSpeed(anyToFloat(params!["ridesharingSpeed"]!))
                }
                if params?.index(forKey: "carNoParkSpeed") != nil {
                    _ = queryBuilder.withCarNoParkSpeed(anyToFloat(params!["carNoParkSpeed"]!))
                }
                if params?.index(forKey: "taxiSpeed") != nil {
                    _ = queryBuilder.withTaxiSpeed(anyToFloat(params!["taxiSpeed"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "allowedId") != nil {
                    _ = queryBuilder.withAllowedId(arrayToStringDict(params!["allowedId"]!))
                }
                if params?.index(forKey: "disruptionActive") != nil {
                    _ = queryBuilder.withDisruptionActive(anyToBool(params!["disruptionActive"]!))
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageRegionHeatMapsRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "maxDuration") != nil {
                    _ = queryBuilder.withMaxDuration(anyToInt(params!["maxDuration"]!))
                }
                if params?.index(forKey: "wheelchair") != nil {
                    _ = queryBuilder.withWheelchair(anyToBool(params!["wheelchair"]!))
                }
                if params?.index(forKey: "travelerType") != nil {
                    if let enumValue = anyToEnum(params!["travelerType"]!) as CoverageRegionHeatMapsRequestBuilder.TravelerType? {
                        _ = queryBuilder.withTravelerType(enumValue)
                    }
                }
                if params?.index(forKey: "directPath") != nil {
                    if let enumValue = anyToEnum(params!["directPath"]!) as CoverageRegionHeatMapsRequestBuilder.DirectPath? {
                        _ = queryBuilder.withDirectPath(enumValue)
                    }
                }
                if params?.index(forKey: "freeRadiusFrom") != nil {
                    _ = queryBuilder.withFreeRadiusFrom(anyToInt(params!["freeRadiusFrom"]!))
                }
                if params?.index(forKey: "freeRadiusTo") != nil {
                    _ = queryBuilder.withFreeRadiusTo(anyToInt(params!["freeRadiusTo"]!))
                }
                if params?.index(forKey: "directPathMode") != nil {
                    _ = queryBuilder.withDirectPathMode(arrayToEnum(params!["directPathMode"]!) as [CoverageRegionHeatMapsRequestBuilder.DirectPathMode])
                }
                if params?.index(forKey: "partnerServices") != nil {
                    _ = queryBuilder.withPartnerServices(arrayToEnum(params!["partnerServices"]!) as [CoverageRegionHeatMapsRequestBuilder.PartnerServices])
                }
                if params?.index(forKey: "resolution") != nil {
                    _ = queryBuilder.withResolution(anyToInt(params!["resolution"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatJourneyPatternPoints:)
    func coverageLonLatJourneyPatternPoints(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatJourneyPatternPointsRequestBuilder = sdk.journeyPatternPointsApi.newCoverageLonLatJourneyPatternPointsRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageLonLatJourneyPatternPointsRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageLonLatJourneyPatternPointsRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatJourneyPatternPointsId:)
    func coverageLonLatJourneyPatternPointsId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatJourneyPatternPointsIdRequestBuilder = sdk.journeyPatternPointsApi.newCoverageLonLatJourneyPatternPointsIdRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageLonLatJourneyPatternPointsIdRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageLonLatJourneyPatternPointsIdRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatUriJourneyPatternPoints:)
    func coverageLonLatUriJourneyPatternPoints(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatUriJourneyPatternPointsRequestBuilder = sdk.journeyPatternPointsApi.newCoverageLonLatUriJourneyPatternPointsRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageLonLatUriJourneyPatternPointsRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageLonLatUriJourneyPatternPointsRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatUriJourneyPatternPointsId:)
    func coverageLonLatUriJourneyPatternPointsId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatUriJourneyPatternPointsIdRequestBuilder = sdk.journeyPatternPointsApi.newCoverageLonLatUriJourneyPatternPointsIdRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageLonLatUriJourneyPatternPointsIdRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageLonLatUriJourneyPatternPointsIdRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionJourneyPatternPoints:)
    func coverageRegionJourneyPatternPoints(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionJourneyPatternPointsRequestBuilder = sdk.journeyPatternPointsApi.newCoverageRegionJourneyPatternPointsRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageRegionJourneyPatternPointsRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageRegionJourneyPatternPointsRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionJourneyPatternPointsId:)
    func coverageRegionJourneyPatternPointsId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionJourneyPatternPointsIdRequestBuilder = sdk.journeyPatternPointsApi.newCoverageRegionJourneyPatternPointsIdRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageRegionJourneyPatternPointsIdRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageRegionJourneyPatternPointsIdRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionUriJourneyPatternPoints:)
    func coverageRegionUriJourneyPatternPoints(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionUriJourneyPatternPointsRequestBuilder = sdk.journeyPatternPointsApi.newCoverageRegionUriJourneyPatternPointsRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageRegionUriJourneyPatternPointsRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageRegionUriJourneyPatternPointsRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionUriJourneyPatternPointsId:)
    func coverageRegionUriJourneyPatternPointsId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionUriJourneyPatternPointsIdRequestBuilder = sdk.journeyPatternPointsApi.newCoverageRegionUriJourneyPatternPointsIdRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageRegionUriJourneyPatternPointsIdRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageRegionUriJourneyPatternPointsIdRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatJourneyPatterns:)
    func coverageLonLatJourneyPatterns(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatJourneyPatternsRequestBuilder = sdk.journeyPatternsApi.newCoverageLonLatJourneyPatternsRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageLonLatJourneyPatternsRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageLonLatJourneyPatternsRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatJourneyPatternsId:)
    func coverageLonLatJourneyPatternsId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatJourneyPatternsIdRequestBuilder = sdk.journeyPatternsApi.newCoverageLonLatJourneyPatternsIdRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageLonLatJourneyPatternsIdRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageLonLatJourneyPatternsIdRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatUriJourneyPatterns:)
    func coverageLonLatUriJourneyPatterns(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatUriJourneyPatternsRequestBuilder = sdk.journeyPatternsApi.newCoverageLonLatUriJourneyPatternsRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageLonLatUriJourneyPatternsRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageLonLatUriJourneyPatternsRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatUriJourneyPatternsId:)
    func coverageLonLatUriJourneyPatternsId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatUriJourneyPatternsIdRequestBuilder = sdk.journeyPatternsApi.newCoverageLonLatUriJourneyPatternsIdRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageLonLatUriJourneyPatternsIdRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageLonLatUriJourneyPatternsIdRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionJourneyPatterns:)
    func coverageRegionJourneyPatterns(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionJourneyPatternsRequestBuilder = sdk.journeyPatternsApi.newCoverageRegionJourneyPatternsRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageRegionJourneyPatternsRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageRegionJourneyPatternsRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionJourneyPatternsId:)
    func coverageRegionJourneyPatternsId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionJourneyPatternsIdRequestBuilder = sdk.journeyPatternsApi.newCoverageRegionJourneyPatternsIdRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageRegionJourneyPatternsIdRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageRegionJourneyPatternsIdRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionUriJourneyPatterns:)
    func coverageRegionUriJourneyPatterns(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionUriJourneyPatternsRequestBuilder = sdk.journeyPatternsApi.newCoverageRegionUriJourneyPatternsRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageRegionUriJourneyPatternsRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageRegionUriJourneyPatternsRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionUriJourneyPatternsId:)
    func coverageRegionUriJourneyPatternsId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionUriJourneyPatternsIdRequestBuilder = sdk.journeyPatternsApi.newCoverageRegionUriJourneyPatternsIdRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageRegionUriJourneyPatternsIdRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageRegionUriJourneyPatternsIdRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatJourneys:)
    func coverageLonLatJourneys(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatJourneysRequestBuilder = sdk.journeysApi.newCoverageLonLatJourneysRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "from") != nil {
                    _ = queryBuilder.withFrom(anyToString(params!["from"]!))
                }
                if params?.index(forKey: "to") != nil {
                    _ = queryBuilder.withTo(anyToString(params!["to"]!))
                }
                if params?.index(forKey: "datetime") != nil {
                    _ = queryBuilder.withDatetime(anyToDateTime(params!["datetime"]!))
                }
                if params?.index(forKey: "datetimeRepresents") != nil {
                    if let enumValue = anyToEnum(params!["datetimeRepresents"]!) as CoverageLonLatJourneysRequestBuilder.DatetimeRepresents? {
                        _ = queryBuilder.withDatetimeRepresents(enumValue)
                    }
                }
                if params?.index(forKey: "maxNbTransfers") != nil {
                    _ = queryBuilder.withMaxNbTransfers(anyToInt(params!["maxNbTransfers"]!))
                }
                if params?.index(forKey: "minNbTransfers") != nil {
                    _ = queryBuilder.withMinNbTransfers(anyToInt(params!["minNbTransfers"]!))
                }
                if params?.index(forKey: "firstSectionMode") != nil {
                    _ = queryBuilder.withFirstSectionMode(arrayToEnum(params!["firstSectionMode"]!) as [CoverageLonLatJourneysRequestBuilder.FirstSectionMode])
                }
                if params?.index(forKey: "lastSectionMode") != nil {
                    _ = queryBuilder.withLastSectionMode(arrayToEnum(params!["lastSectionMode"]!) as [CoverageLonLatJourneysRequestBuilder.LastSectionMode])
                }
                if params?.index(forKey: "maxDurationToPt") != nil {
                    _ = queryBuilder.withMaxDurationToPt(anyToInt(params!["maxDurationToPt"]!))
                }
                if params?.index(forKey: "maxWalkingDurationToPt") != nil {
                    _ = queryBuilder.withMaxWalkingDurationToPt(anyToInt(params!["maxWalkingDurationToPt"]!))
                }
                if params?.index(forKey: "maxBikeDurationToPt") != nil {
                    _ = queryBuilder.withMaxBikeDurationToPt(anyToInt(params!["maxBikeDurationToPt"]!))
                }
                if params?.index(forKey: "maxBssDurationToPt") != nil {
                    _ = queryBuilder.withMaxBssDurationToPt(anyToInt(params!["maxBssDurationToPt"]!))
                }
                if params?.index(forKey: "maxCarDurationToPt") != nil {
                    _ = queryBuilder.withMaxCarDurationToPt(anyToInt(params!["maxCarDurationToPt"]!))
                }
                if params?.index(forKey: "maxRidesharingDurationToPt") != nil {
                    _ = queryBuilder.withMaxRidesharingDurationToPt(anyToInt(params!["maxRidesharingDurationToPt"]!))
                }
                if params?.index(forKey: "maxCarNoParkDurationToPt") != nil {
                    _ = queryBuilder.withMaxCarNoParkDurationToPt(anyToInt(params!["maxCarNoParkDurationToPt"]!))
                }
                if params?.index(forKey: "maxTaxiDurationToPt") != nil {
                    _ = queryBuilder.withMaxTaxiDurationToPt(anyToInt(params!["maxTaxiDurationToPt"]!))
                }
                if params?.index(forKey: "walkingSpeed") != nil {
                    _ = queryBuilder.withWalkingSpeed(anyToFloat(params!["walkingSpeed"]!))
                }
                if params?.index(forKey: "bikeSpeed") != nil {
                    _ = queryBuilder.withBikeSpeed(anyToFloat(params!["bikeSpeed"]!))
                }
                if params?.index(forKey: "bssSpeed") != nil {
                    _ = queryBuilder.withBssSpeed(anyToFloat(params!["bssSpeed"]!))
                }
                if params?.index(forKey: "carSpeed") != nil {
                    _ = queryBuilder.withCarSpeed(anyToFloat(params!["carSpeed"]!))
                }
                if params?.index(forKey: "ridesharingSpeed") != nil {
                    _ = queryBuilder.withRidesharingSpeed(anyToFloat(params!["ridesharingSpeed"]!))
                }
                if params?.index(forKey: "carNoParkSpeed") != nil {
                    _ = queryBuilder.withCarNoParkSpeed(anyToFloat(params!["carNoParkSpeed"]!))
                }
                if params?.index(forKey: "taxiSpeed") != nil {
                    _ = queryBuilder.withTaxiSpeed(anyToFloat(params!["taxiSpeed"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "allowedId") != nil {
                    _ = queryBuilder.withAllowedId(arrayToStringDict(params!["allowedId"]!))
                }
                if params?.index(forKey: "disruptionActive") != nil {
                    _ = queryBuilder.withDisruptionActive(anyToBool(params!["disruptionActive"]!))
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageLonLatJourneysRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "maxDuration") != nil {
                    _ = queryBuilder.withMaxDuration(anyToInt(params!["maxDuration"]!))
                }
                if params?.index(forKey: "wheelchair") != nil {
                    _ = queryBuilder.withWheelchair(anyToBool(params!["wheelchair"]!))
                }
                if params?.index(forKey: "travelerType") != nil {
                    if let enumValue = anyToEnum(params!["travelerType"]!) as CoverageLonLatJourneysRequestBuilder.TravelerType? {
                        _ = queryBuilder.withTravelerType(enumValue)
                    }
                }
                if params?.index(forKey: "directPath") != nil {
                    if let enumValue = anyToEnum(params!["directPath"]!) as CoverageLonLatJourneysRequestBuilder.DirectPath? {
                        _ = queryBuilder.withDirectPath(enumValue)
                    }
                }
                if params?.index(forKey: "freeRadiusFrom") != nil {
                    _ = queryBuilder.withFreeRadiusFrom(anyToInt(params!["freeRadiusFrom"]!))
                }
                if params?.index(forKey: "freeRadiusTo") != nil {
                    _ = queryBuilder.withFreeRadiusTo(anyToInt(params!["freeRadiusTo"]!))
                }
                if params?.index(forKey: "directPathMode") != nil {
                    _ = queryBuilder.withDirectPathMode(arrayToEnum(params!["directPathMode"]!) as [CoverageLonLatJourneysRequestBuilder.DirectPathMode])
                }
                if params?.index(forKey: "partnerServices") != nil {
                    _ = queryBuilder.withPartnerServices(arrayToEnum(params!["partnerServices"]!) as [CoverageLonLatJourneysRequestBuilder.PartnerServices])
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "isJourneySchedules") != nil {
                    _ = queryBuilder.withIsJourneySchedules(anyToBool(params!["isJourneySchedules"]!))
                }
                if params?.index(forKey: "minNbJourneys") != nil {
                    _ = queryBuilder.withMinNbJourneys(anyToInt(params!["minNbJourneys"]!))
                }
                if params?.index(forKey: "maxNbJourneys") != nil {
                    _ = queryBuilder.withMaxNbJourneys(anyToInt(params!["maxNbJourneys"]!))
                }
                if params?.index(forKey: "bssStands") != nil {
                    _ = queryBuilder.withBssStands(anyToBool(params!["bssStands"]!))
                }
                if params?.index(forKey: "addPoiInfos") != nil {
                    _ = queryBuilder.withAddPoiInfos(arrayToEnum(params!["addPoiInfos"]!) as [CoverageLonLatJourneysRequestBuilder.AddPoiInfos])
                }
                if params?.index(forKey: "timeframeDuration") != nil {
                    _ = queryBuilder.withTimeframeDuration(anyToInt(params!["timeframeDuration"]!))
                }
                if params?.index(forKey: "equipmentDetails") != nil {
                    _ = queryBuilder.withEquipmentDetails(anyToBool(params!["equipmentDetails"]!))
                }
                if params?.index(forKey: "maxTaxiDirectPathDuration") != nil {
                    _ = queryBuilder.withMaxTaxiDirectPathDuration(anyToInt(params!["maxTaxiDirectPathDuration"]!))
                }
                if params?.index(forKey: "maxWalkingDirectPathDuration") != nil {
                    _ = queryBuilder.withMaxWalkingDirectPathDuration(anyToInt(params!["maxWalkingDirectPathDuration"]!))
                }
                if params?.index(forKey: "maxCarNoParkDirectPathDuration") != nil {
                    _ = queryBuilder.withMaxCarNoParkDirectPathDuration(anyToInt(params!["maxCarNoParkDirectPathDuration"]!))
                }
                if params?.index(forKey: "maxCarDirectPathDuration") != nil {
                    _ = queryBuilder.withMaxCarDirectPathDuration(anyToInt(params!["maxCarDirectPathDuration"]!))
                }
                if params?.index(forKey: "maxRidesharingDirectPathDuration") != nil {
                    _ = queryBuilder.withMaxRidesharingDirectPathDuration(anyToInt(params!["maxRidesharingDirectPathDuration"]!))
                }
                if params?.index(forKey: "maxBssDirectPathDuration") != nil {
                    _ = queryBuilder.withMaxBssDirectPathDuration(anyToInt(params!["maxBssDirectPathDuration"]!))
                }
                if params?.index(forKey: "maxBikeDirectPathDuration") != nil {
                    _ = queryBuilder.withMaxBikeDirectPathDuration(anyToInt(params!["maxBikeDirectPathDuration"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionJourneys:)
    func coverageRegionJourneys(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionJourneysRequestBuilder = sdk.journeysApi.newCoverageRegionJourneysRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "from") != nil {
                    _ = queryBuilder.withFrom(anyToString(params!["from"]!))
                }
                if params?.index(forKey: "to") != nil {
                    _ = queryBuilder.withTo(anyToString(params!["to"]!))
                }
                if params?.index(forKey: "datetime") != nil {
                    _ = queryBuilder.withDatetime(anyToDateTime(params!["datetime"]!))
                }
                if params?.index(forKey: "datetimeRepresents") != nil {
                    if let enumValue = anyToEnum(params!["datetimeRepresents"]!) as CoverageRegionJourneysRequestBuilder.DatetimeRepresents? {
                        _ = queryBuilder.withDatetimeRepresents(enumValue)
                    }
                }
                if params?.index(forKey: "maxNbTransfers") != nil {
                    _ = queryBuilder.withMaxNbTransfers(anyToInt(params!["maxNbTransfers"]!))
                }
                if params?.index(forKey: "minNbTransfers") != nil {
                    _ = queryBuilder.withMinNbTransfers(anyToInt(params!["minNbTransfers"]!))
                }
                if params?.index(forKey: "firstSectionMode") != nil {
                    _ = queryBuilder.withFirstSectionMode(arrayToEnum(params!["firstSectionMode"]!) as [CoverageRegionJourneysRequestBuilder.FirstSectionMode])
                }
                if params?.index(forKey: "lastSectionMode") != nil {
                    _ = queryBuilder.withLastSectionMode(arrayToEnum(params!["lastSectionMode"]!) as [CoverageRegionJourneysRequestBuilder.LastSectionMode])
                }
                if params?.index(forKey: "maxDurationToPt") != nil {
                    _ = queryBuilder.withMaxDurationToPt(anyToInt(params!["maxDurationToPt"]!))
                }
                if params?.index(forKey: "maxWalkingDurationToPt") != nil {
                    _ = queryBuilder.withMaxWalkingDurationToPt(anyToInt(params!["maxWalkingDurationToPt"]!))
                }
                if params?.index(forKey: "maxBikeDurationToPt") != nil {
                    _ = queryBuilder.withMaxBikeDurationToPt(anyToInt(params!["maxBikeDurationToPt"]!))
                }
                if params?.index(forKey: "maxBssDurationToPt") != nil {
                    _ = queryBuilder.withMaxBssDurationToPt(anyToInt(params!["maxBssDurationToPt"]!))
                }
                if params?.index(forKey: "maxCarDurationToPt") != nil {
                    _ = queryBuilder.withMaxCarDurationToPt(anyToInt(params!["maxCarDurationToPt"]!))
                }
                if params?.index(forKey: "maxRidesharingDurationToPt") != nil {
                    _ = queryBuilder.withMaxRidesharingDurationToPt(anyToInt(params!["maxRidesharingDurationToPt"]!))
                }
                if params?.index(forKey: "maxCarNoParkDurationToPt") != nil {
                    _ = queryBuilder.withMaxCarNoParkDurationToPt(anyToInt(params!["maxCarNoParkDurationToPt"]!))
                }
                if params?.index(forKey: "maxTaxiDurationToPt") != nil {
                    _ = queryBuilder.withMaxTaxiDurationToPt(anyToInt(params!["maxTaxiDurationToPt"]!))
                }
                if params?.index(forKey: "walkingSpeed") != nil {
                    _ = queryBuilder.withWalkingSpeed(anyToFloat(params!["walkingSpeed"]!))
                }
                if params?.index(forKey: "bikeSpeed") != nil {
                    _ = queryBuilder.withBikeSpeed(anyToFloat(params!["bikeSpeed"]!))
                }
                if params?.index(forKey: "bssSpeed") != nil {
                    _ = queryBuilder.withBssSpeed(anyToFloat(params!["bssSpeed"]!))
                }
                if params?.index(forKey: "carSpeed") != nil {
                    _ = queryBuilder.withCarSpeed(anyToFloat(params!["carSpeed"]!))
                }
                if params?.index(forKey: "ridesharingSpeed") != nil {
                    _ = queryBuilder.withRidesharingSpeed(anyToFloat(params!["ridesharingSpeed"]!))
                }
                if params?.index(forKey: "carNoParkSpeed") != nil {
                    _ = queryBuilder.withCarNoParkSpeed(anyToFloat(params!["carNoParkSpeed"]!))
                }
                if params?.index(forKey: "taxiSpeed") != nil {
                    _ = queryBuilder.withTaxiSpeed(anyToFloat(params!["taxiSpeed"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "allowedId") != nil {
                    _ = queryBuilder.withAllowedId(arrayToStringDict(params!["allowedId"]!))
                }
                if params?.index(forKey: "disruptionActive") != nil {
                    _ = queryBuilder.withDisruptionActive(anyToBool(params!["disruptionActive"]!))
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageRegionJourneysRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "maxDuration") != nil {
                    _ = queryBuilder.withMaxDuration(anyToInt(params!["maxDuration"]!))
                }
                if params?.index(forKey: "wheelchair") != nil {
                    _ = queryBuilder.withWheelchair(anyToBool(params!["wheelchair"]!))
                }
                if params?.index(forKey: "travelerType") != nil {
                    if let enumValue = anyToEnum(params!["travelerType"]!) as CoverageRegionJourneysRequestBuilder.TravelerType? {
                        _ = queryBuilder.withTravelerType(enumValue)
                    }
                }
                if params?.index(forKey: "directPath") != nil {
                    if let enumValue = anyToEnum(params!["directPath"]!) as CoverageRegionJourneysRequestBuilder.DirectPath? {
                        _ = queryBuilder.withDirectPath(enumValue)
                    }
                }
                if params?.index(forKey: "freeRadiusFrom") != nil {
                    _ = queryBuilder.withFreeRadiusFrom(anyToInt(params!["freeRadiusFrom"]!))
                }
                if params?.index(forKey: "freeRadiusTo") != nil {
                    _ = queryBuilder.withFreeRadiusTo(anyToInt(params!["freeRadiusTo"]!))
                }
                if params?.index(forKey: "directPathMode") != nil {
                    _ = queryBuilder.withDirectPathMode(arrayToEnum(params!["directPathMode"]!) as [CoverageRegionJourneysRequestBuilder.DirectPathMode])
                }
                if params?.index(forKey: "partnerServices") != nil {
                    _ = queryBuilder.withPartnerServices(arrayToEnum(params!["partnerServices"]!) as [CoverageRegionJourneysRequestBuilder.PartnerServices])
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "isJourneySchedules") != nil {
                    _ = queryBuilder.withIsJourneySchedules(anyToBool(params!["isJourneySchedules"]!))
                }
                if params?.index(forKey: "minNbJourneys") != nil {
                    _ = queryBuilder.withMinNbJourneys(anyToInt(params!["minNbJourneys"]!))
                }
                if params?.index(forKey: "maxNbJourneys") != nil {
                    _ = queryBuilder.withMaxNbJourneys(anyToInt(params!["maxNbJourneys"]!))
                }
                if params?.index(forKey: "bssStands") != nil {
                    _ = queryBuilder.withBssStands(anyToBool(params!["bssStands"]!))
                }
                if params?.index(forKey: "addPoiInfos") != nil {
                    _ = queryBuilder.withAddPoiInfos(arrayToEnum(params!["addPoiInfos"]!) as [CoverageRegionJourneysRequestBuilder.AddPoiInfos])
                }
                if params?.index(forKey: "timeframeDuration") != nil {
                    _ = queryBuilder.withTimeframeDuration(anyToInt(params!["timeframeDuration"]!))
                }
                if params?.index(forKey: "equipmentDetails") != nil {
                    _ = queryBuilder.withEquipmentDetails(anyToBool(params!["equipmentDetails"]!))
                }
                if params?.index(forKey: "maxTaxiDirectPathDuration") != nil {
                    _ = queryBuilder.withMaxTaxiDirectPathDuration(anyToInt(params!["maxTaxiDirectPathDuration"]!))
                }
                if params?.index(forKey: "maxWalkingDirectPathDuration") != nil {
                    _ = queryBuilder.withMaxWalkingDirectPathDuration(anyToInt(params!["maxWalkingDirectPathDuration"]!))
                }
                if params?.index(forKey: "maxCarNoParkDirectPathDuration") != nil {
                    _ = queryBuilder.withMaxCarNoParkDirectPathDuration(anyToInt(params!["maxCarNoParkDirectPathDuration"]!))
                }
                if params?.index(forKey: "maxCarDirectPathDuration") != nil {
                    _ = queryBuilder.withMaxCarDirectPathDuration(anyToInt(params!["maxCarDirectPathDuration"]!))
                }
                if params?.index(forKey: "maxRidesharingDirectPathDuration") != nil {
                    _ = queryBuilder.withMaxRidesharingDirectPathDuration(anyToInt(params!["maxRidesharingDirectPathDuration"]!))
                }
                if params?.index(forKey: "maxBssDirectPathDuration") != nil {
                    _ = queryBuilder.withMaxBssDirectPathDuration(anyToInt(params!["maxBssDirectPathDuration"]!))
                }
                if params?.index(forKey: "maxBikeDirectPathDuration") != nil {
                    _ = queryBuilder.withMaxBikeDirectPathDuration(anyToInt(params!["maxBikeDirectPathDuration"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(journeys:)
    func journeys(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: JourneysRequestBuilder = sdk.journeysApi.newJourneysRequestBuilder();

                if params?.index(forKey: "from") != nil {
                    _ = queryBuilder.withFrom(anyToString(params!["from"]!))
                }
                if params?.index(forKey: "to") != nil {
                    _ = queryBuilder.withTo(anyToString(params!["to"]!))
                }
                if params?.index(forKey: "datetime") != nil {
                    _ = queryBuilder.withDatetime(anyToDateTime(params!["datetime"]!))
                }
                if params?.index(forKey: "datetimeRepresents") != nil {
                    if let enumValue = anyToEnum(params!["datetimeRepresents"]!) as JourneysRequestBuilder.DatetimeRepresents? {
                        _ = queryBuilder.withDatetimeRepresents(enumValue)
                    }
                }
                if params?.index(forKey: "maxNbTransfers") != nil {
                    _ = queryBuilder.withMaxNbTransfers(anyToInt(params!["maxNbTransfers"]!))
                }
                if params?.index(forKey: "minNbTransfers") != nil {
                    _ = queryBuilder.withMinNbTransfers(anyToInt(params!["minNbTransfers"]!))
                }
                if params?.index(forKey: "firstSectionMode") != nil {
                    _ = queryBuilder.withFirstSectionMode(arrayToEnum(params!["firstSectionMode"]!) as [JourneysRequestBuilder.FirstSectionMode])
                }
                if params?.index(forKey: "lastSectionMode") != nil {
                    _ = queryBuilder.withLastSectionMode(arrayToEnum(params!["lastSectionMode"]!) as [JourneysRequestBuilder.LastSectionMode])
                }
                if params?.index(forKey: "maxDurationToPt") != nil {
                    _ = queryBuilder.withMaxDurationToPt(anyToInt(params!["maxDurationToPt"]!))
                }
                if params?.index(forKey: "maxWalkingDurationToPt") != nil {
                    _ = queryBuilder.withMaxWalkingDurationToPt(anyToInt(params!["maxWalkingDurationToPt"]!))
                }
                if params?.index(forKey: "maxBikeDurationToPt") != nil {
                    _ = queryBuilder.withMaxBikeDurationToPt(anyToInt(params!["maxBikeDurationToPt"]!))
                }
                if params?.index(forKey: "maxBssDurationToPt") != nil {
                    _ = queryBuilder.withMaxBssDurationToPt(anyToInt(params!["maxBssDurationToPt"]!))
                }
                if params?.index(forKey: "maxCarDurationToPt") != nil {
                    _ = queryBuilder.withMaxCarDurationToPt(anyToInt(params!["maxCarDurationToPt"]!))
                }
                if params?.index(forKey: "maxRidesharingDurationToPt") != nil {
                    _ = queryBuilder.withMaxRidesharingDurationToPt(anyToInt(params!["maxRidesharingDurationToPt"]!))
                }
                if params?.index(forKey: "maxCarNoParkDurationToPt") != nil {
                    _ = queryBuilder.withMaxCarNoParkDurationToPt(anyToInt(params!["maxCarNoParkDurationToPt"]!))
                }
                if params?.index(forKey: "maxTaxiDurationToPt") != nil {
                    _ = queryBuilder.withMaxTaxiDurationToPt(anyToInt(params!["maxTaxiDurationToPt"]!))
                }
                if params?.index(forKey: "walkingSpeed") != nil {
                    _ = queryBuilder.withWalkingSpeed(anyToFloat(params!["walkingSpeed"]!))
                }
                if params?.index(forKey: "bikeSpeed") != nil {
                    _ = queryBuilder.withBikeSpeed(anyToFloat(params!["bikeSpeed"]!))
                }
                if params?.index(forKey: "bssSpeed") != nil {
                    _ = queryBuilder.withBssSpeed(anyToFloat(params!["bssSpeed"]!))
                }
                if params?.index(forKey: "carSpeed") != nil {
                    _ = queryBuilder.withCarSpeed(anyToFloat(params!["carSpeed"]!))
                }
                if params?.index(forKey: "ridesharingSpeed") != nil {
                    _ = queryBuilder.withRidesharingSpeed(anyToFloat(params!["ridesharingSpeed"]!))
                }
                if params?.index(forKey: "carNoParkSpeed") != nil {
                    _ = queryBuilder.withCarNoParkSpeed(anyToFloat(params!["carNoParkSpeed"]!))
                }
                if params?.index(forKey: "taxiSpeed") != nil {
                    _ = queryBuilder.withTaxiSpeed(anyToFloat(params!["taxiSpeed"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "allowedId") != nil {
                    _ = queryBuilder.withAllowedId(arrayToStringDict(params!["allowedId"]!))
                }
                if params?.index(forKey: "disruptionActive") != nil {
                    _ = queryBuilder.withDisruptionActive(anyToBool(params!["disruptionActive"]!))
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as JourneysRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "maxDuration") != nil {
                    _ = queryBuilder.withMaxDuration(anyToInt(params!["maxDuration"]!))
                }
                if params?.index(forKey: "wheelchair") != nil {
                    _ = queryBuilder.withWheelchair(anyToBool(params!["wheelchair"]!))
                }
                if params?.index(forKey: "travelerType") != nil {
                    if let enumValue = anyToEnum(params!["travelerType"]!) as JourneysRequestBuilder.TravelerType? {
                        _ = queryBuilder.withTravelerType(enumValue)
                    }
                }
                if params?.index(forKey: "directPath") != nil {
                    if let enumValue = anyToEnum(params!["directPath"]!) as JourneysRequestBuilder.DirectPath? {
                        _ = queryBuilder.withDirectPath(enumValue)
                    }
                }
                if params?.index(forKey: "freeRadiusFrom") != nil {
                    _ = queryBuilder.withFreeRadiusFrom(anyToInt(params!["freeRadiusFrom"]!))
                }
                if params?.index(forKey: "freeRadiusTo") != nil {
                    _ = queryBuilder.withFreeRadiusTo(anyToInt(params!["freeRadiusTo"]!))
                }
                if params?.index(forKey: "directPathMode") != nil {
                    _ = queryBuilder.withDirectPathMode(arrayToEnum(params!["directPathMode"]!) as [JourneysRequestBuilder.DirectPathMode])
                }
                if params?.index(forKey: "partnerServices") != nil {
                    _ = queryBuilder.withPartnerServices(arrayToEnum(params!["partnerServices"]!) as [JourneysRequestBuilder.PartnerServices])
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "isJourneySchedules") != nil {
                    _ = queryBuilder.withIsJourneySchedules(anyToBool(params!["isJourneySchedules"]!))
                }
                if params?.index(forKey: "minNbJourneys") != nil {
                    _ = queryBuilder.withMinNbJourneys(anyToInt(params!["minNbJourneys"]!))
                }
                if params?.index(forKey: "maxNbJourneys") != nil {
                    _ = queryBuilder.withMaxNbJourneys(anyToInt(params!["maxNbJourneys"]!))
                }
                if params?.index(forKey: "bssStands") != nil {
                    _ = queryBuilder.withBssStands(anyToBool(params!["bssStands"]!))
                }
                if params?.index(forKey: "addPoiInfos") != nil {
                    _ = queryBuilder.withAddPoiInfos(arrayToEnum(params!["addPoiInfos"]!) as [JourneysRequestBuilder.AddPoiInfos])
                }
                if params?.index(forKey: "timeframeDuration") != nil {
                    _ = queryBuilder.withTimeframeDuration(anyToInt(params!["timeframeDuration"]!))
                }
                if params?.index(forKey: "equipmentDetails") != nil {
                    _ = queryBuilder.withEquipmentDetails(anyToBool(params!["equipmentDetails"]!))
                }
                if params?.index(forKey: "maxTaxiDirectPathDuration") != nil {
                    _ = queryBuilder.withMaxTaxiDirectPathDuration(anyToInt(params!["maxTaxiDirectPathDuration"]!))
                }
                if params?.index(forKey: "maxWalkingDirectPathDuration") != nil {
                    _ = queryBuilder.withMaxWalkingDirectPathDuration(anyToInt(params!["maxWalkingDirectPathDuration"]!))
                }
                if params?.index(forKey: "maxCarNoParkDirectPathDuration") != nil {
                    _ = queryBuilder.withMaxCarNoParkDirectPathDuration(anyToInt(params!["maxCarNoParkDirectPathDuration"]!))
                }
                if params?.index(forKey: "maxCarDirectPathDuration") != nil {
                    _ = queryBuilder.withMaxCarDirectPathDuration(anyToInt(params!["maxCarDirectPathDuration"]!))
                }
                if params?.index(forKey: "maxRidesharingDirectPathDuration") != nil {
                    _ = queryBuilder.withMaxRidesharingDirectPathDuration(anyToInt(params!["maxRidesharingDirectPathDuration"]!))
                }
                if params?.index(forKey: "maxBssDirectPathDuration") != nil {
                    _ = queryBuilder.withMaxBssDirectPathDuration(anyToInt(params!["maxBssDirectPathDuration"]!))
                }
                if params?.index(forKey: "maxBikeDirectPathDuration") != nil {
                    _ = queryBuilder.withMaxBikeDirectPathDuration(anyToInt(params!["maxBikeDirectPathDuration"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatLineGroups:)
    func coverageLonLatLineGroups(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatLineGroupsRequestBuilder = sdk.lineGroupsApi.newCoverageLonLatLineGroupsRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageLonLatLineGroupsRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageLonLatLineGroupsRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }
                if params?.index(forKey: "originalId") != nil {
                    _ = queryBuilder.withOriginalId(anyToString(params!["originalId"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatLineGroupsId:)
    func coverageLonLatLineGroupsId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatLineGroupsIdRequestBuilder = sdk.lineGroupsApi.newCoverageLonLatLineGroupsIdRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageLonLatLineGroupsIdRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageLonLatLineGroupsIdRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }
                if params?.index(forKey: "originalId") != nil {
                    _ = queryBuilder.withOriginalId(anyToString(params!["originalId"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatUriLineGroups:)
    func coverageLonLatUriLineGroups(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatUriLineGroupsRequestBuilder = sdk.lineGroupsApi.newCoverageLonLatUriLineGroupsRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageLonLatUriLineGroupsRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageLonLatUriLineGroupsRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }
                if params?.index(forKey: "originalId") != nil {
                    _ = queryBuilder.withOriginalId(anyToString(params!["originalId"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatUriLineGroupsId:)
    func coverageLonLatUriLineGroupsId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatUriLineGroupsIdRequestBuilder = sdk.lineGroupsApi.newCoverageLonLatUriLineGroupsIdRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageLonLatUriLineGroupsIdRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageLonLatUriLineGroupsIdRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }
                if params?.index(forKey: "originalId") != nil {
                    _ = queryBuilder.withOriginalId(anyToString(params!["originalId"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionLineGroups:)
    func coverageRegionLineGroups(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionLineGroupsRequestBuilder = sdk.lineGroupsApi.newCoverageRegionLineGroupsRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageRegionLineGroupsRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageRegionLineGroupsRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }
                if params?.index(forKey: "originalId") != nil {
                    _ = queryBuilder.withOriginalId(anyToString(params!["originalId"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionLineGroupsId:)
    func coverageRegionLineGroupsId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionLineGroupsIdRequestBuilder = sdk.lineGroupsApi.newCoverageRegionLineGroupsIdRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageRegionLineGroupsIdRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageRegionLineGroupsIdRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }
                if params?.index(forKey: "originalId") != nil {
                    _ = queryBuilder.withOriginalId(anyToString(params!["originalId"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionUriLineGroups:)
    func coverageRegionUriLineGroups(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionUriLineGroupsRequestBuilder = sdk.lineGroupsApi.newCoverageRegionUriLineGroupsRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageRegionUriLineGroupsRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageRegionUriLineGroupsRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }
                if params?.index(forKey: "originalId") != nil {
                    _ = queryBuilder.withOriginalId(anyToString(params!["originalId"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionUriLineGroupsId:)
    func coverageRegionUriLineGroupsId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionUriLineGroupsIdRequestBuilder = sdk.lineGroupsApi.newCoverageRegionUriLineGroupsIdRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageRegionUriLineGroupsIdRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageRegionUriLineGroupsIdRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }
                if params?.index(forKey: "originalId") != nil {
                    _ = queryBuilder.withOriginalId(anyToString(params!["originalId"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(lineGroups:)
    func lineGroups(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: LineGroupsRequestBuilder = sdk.lineGroupsApi.newLineGroupsRequestBuilder();

                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as LineGroupsRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as LineGroupsRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }
                if params?.index(forKey: "originalId") != nil {
                    _ = queryBuilder.withOriginalId(anyToString(params!["originalId"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatLineReports:)
    func coverageLonLatLineReports(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatLineReportsRequestBuilder = sdk.lineReportsApi.newCoverageLonLatLineReportsRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatUriLineReports:)
    func coverageLonLatUriLineReports(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatUriLineReportsRequestBuilder = sdk.lineReportsApi.newCoverageLonLatUriLineReportsRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionLineReports:)
    func coverageRegionLineReports(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionLineReportsRequestBuilder = sdk.lineReportsApi.newCoverageRegionLineReportsRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionUriLineReports:)
    func coverageRegionUriLineReports(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionUriLineReportsRequestBuilder = sdk.lineReportsApi.newCoverageRegionUriLineReportsRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatLines:)
    func coverageLonLatLines(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatLinesRequestBuilder = sdk.linesApi.newCoverageLonLatLinesRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageLonLatLinesRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageLonLatLinesRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }
                if params?.index(forKey: "originalId") != nil {
                    _ = queryBuilder.withOriginalId(anyToString(params!["originalId"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatLinesId:)
    func coverageLonLatLinesId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatLinesIdRequestBuilder = sdk.linesApi.newCoverageLonLatLinesIdRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageLonLatLinesIdRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageLonLatLinesIdRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }
                if params?.index(forKey: "originalId") != nil {
                    _ = queryBuilder.withOriginalId(anyToString(params!["originalId"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatUriLines:)
    func coverageLonLatUriLines(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatUriLinesRequestBuilder = sdk.linesApi.newCoverageLonLatUriLinesRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageLonLatUriLinesRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageLonLatUriLinesRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }
                if params?.index(forKey: "originalId") != nil {
                    _ = queryBuilder.withOriginalId(anyToString(params!["originalId"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatUriLinesId:)
    func coverageLonLatUriLinesId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatUriLinesIdRequestBuilder = sdk.linesApi.newCoverageLonLatUriLinesIdRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageLonLatUriLinesIdRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageLonLatUriLinesIdRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }
                if params?.index(forKey: "originalId") != nil {
                    _ = queryBuilder.withOriginalId(anyToString(params!["originalId"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionLines:)
    func coverageRegionLines(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionLinesRequestBuilder = sdk.linesApi.newCoverageRegionLinesRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageRegionLinesRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageRegionLinesRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }
                if params?.index(forKey: "originalId") != nil {
                    _ = queryBuilder.withOriginalId(anyToString(params!["originalId"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionLinesId:)
    func coverageRegionLinesId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionLinesIdRequestBuilder = sdk.linesApi.newCoverageRegionLinesIdRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageRegionLinesIdRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageRegionLinesIdRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }
                if params?.index(forKey: "originalId") != nil {
                    _ = queryBuilder.withOriginalId(anyToString(params!["originalId"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionUriLines:)
    func coverageRegionUriLines(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionUriLinesRequestBuilder = sdk.linesApi.newCoverageRegionUriLinesRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageRegionUriLinesRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageRegionUriLinesRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }
                if params?.index(forKey: "originalId") != nil {
                    _ = queryBuilder.withOriginalId(anyToString(params!["originalId"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionUriLinesId:)
    func coverageRegionUriLinesId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionUriLinesIdRequestBuilder = sdk.linesApi.newCoverageRegionUriLinesIdRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageRegionUriLinesIdRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageRegionUriLinesIdRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }
                if params?.index(forKey: "originalId") != nil {
                    _ = queryBuilder.withOriginalId(anyToString(params!["originalId"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(lines:)
    func lines(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: LinesRequestBuilder = sdk.linesApi.newLinesRequestBuilder();

                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as LinesRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as LinesRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }
                if params?.index(forKey: "originalId") != nil {
                    _ = queryBuilder.withOriginalId(anyToString(params!["originalId"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatNetworks:)
    func coverageLonLatNetworks(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatNetworksRequestBuilder = sdk.networksApi.newCoverageLonLatNetworksRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageLonLatNetworksRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageLonLatNetworksRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }
                if params?.index(forKey: "originalId") != nil {
                    _ = queryBuilder.withOriginalId(anyToString(params!["originalId"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatNetworksId:)
    func coverageLonLatNetworksId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatNetworksIdRequestBuilder = sdk.networksApi.newCoverageLonLatNetworksIdRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageLonLatNetworksIdRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageLonLatNetworksIdRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }
                if params?.index(forKey: "originalId") != nil {
                    _ = queryBuilder.withOriginalId(anyToString(params!["originalId"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatUriNetworks:)
    func coverageLonLatUriNetworks(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatUriNetworksRequestBuilder = sdk.networksApi.newCoverageLonLatUriNetworksRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageLonLatUriNetworksRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageLonLatUriNetworksRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }
                if params?.index(forKey: "originalId") != nil {
                    _ = queryBuilder.withOriginalId(anyToString(params!["originalId"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatUriNetworksId:)
    func coverageLonLatUriNetworksId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatUriNetworksIdRequestBuilder = sdk.networksApi.newCoverageLonLatUriNetworksIdRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageLonLatUriNetworksIdRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageLonLatUriNetworksIdRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }
                if params?.index(forKey: "originalId") != nil {
                    _ = queryBuilder.withOriginalId(anyToString(params!["originalId"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionNetworks:)
    func coverageRegionNetworks(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionNetworksRequestBuilder = sdk.networksApi.newCoverageRegionNetworksRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageRegionNetworksRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageRegionNetworksRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }
                if params?.index(forKey: "originalId") != nil {
                    _ = queryBuilder.withOriginalId(anyToString(params!["originalId"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionNetworksId:)
    func coverageRegionNetworksId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionNetworksIdRequestBuilder = sdk.networksApi.newCoverageRegionNetworksIdRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageRegionNetworksIdRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageRegionNetworksIdRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }
                if params?.index(forKey: "originalId") != nil {
                    _ = queryBuilder.withOriginalId(anyToString(params!["originalId"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionUriNetworks:)
    func coverageRegionUriNetworks(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionUriNetworksRequestBuilder = sdk.networksApi.newCoverageRegionUriNetworksRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageRegionUriNetworksRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageRegionUriNetworksRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }
                if params?.index(forKey: "originalId") != nil {
                    _ = queryBuilder.withOriginalId(anyToString(params!["originalId"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionUriNetworksId:)
    func coverageRegionUriNetworksId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionUriNetworksIdRequestBuilder = sdk.networksApi.newCoverageRegionUriNetworksIdRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageRegionUriNetworksIdRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageRegionUriNetworksIdRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }
                if params?.index(forKey: "originalId") != nil {
                    _ = queryBuilder.withOriginalId(anyToString(params!["originalId"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(networks:)
    func networks(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: NetworksRequestBuilder = sdk.networksApi.newNetworksRequestBuilder();

                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as NetworksRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as NetworksRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }
                if params?.index(forKey: "originalId") != nil {
                    _ = queryBuilder.withOriginalId(anyToString(params!["originalId"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatArrivals:)
    func coverageLonLatArrivals(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatArrivalsRequestBuilder = sdk.nextArrivalsApi.newCoverageLonLatArrivalsRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "fromDatetime") != nil {
                    _ = queryBuilder.withFromDatetime(anyToDateTime(params!["fromDatetime"]!))
                }
                if params?.index(forKey: "untilDatetime") != nil {
                    _ = queryBuilder.withUntilDatetime(anyToDateTime(params!["untilDatetime"]!))
                }
                if params?.index(forKey: "duration") != nil {
                    _ = queryBuilder.withDuration(anyToInt(params!["duration"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "maxDateTimes") != nil {
                    _ = queryBuilder.withMaxDateTimes(anyToInt(params!["maxDateTimes"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "calendar") != nil {
                    _ = queryBuilder.withCalendar(anyToString(params!["calendar"]!))
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageLonLatArrivalsRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "itemsPerSchedule") != nil {
                    _ = queryBuilder.withItemsPerSchedule(anyToInt(params!["itemsPerSchedule"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "directionType") != nil {
                    if let enumValue = anyToEnum(params!["directionType"]!) as CoverageLonLatArrivalsRequestBuilder.DirectionType? {
                        _ = queryBuilder.withDirectionType(enumValue)
                    }
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatUriArrivals:)
    func coverageLonLatUriArrivals(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatUriArrivalsRequestBuilder = sdk.nextArrivalsApi.newCoverageLonLatUriArrivalsRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "fromDatetime") != nil {
                    _ = queryBuilder.withFromDatetime(anyToDateTime(params!["fromDatetime"]!))
                }
                if params?.index(forKey: "untilDatetime") != nil {
                    _ = queryBuilder.withUntilDatetime(anyToDateTime(params!["untilDatetime"]!))
                }
                if params?.index(forKey: "duration") != nil {
                    _ = queryBuilder.withDuration(anyToInt(params!["duration"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "maxDateTimes") != nil {
                    _ = queryBuilder.withMaxDateTimes(anyToInt(params!["maxDateTimes"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "calendar") != nil {
                    _ = queryBuilder.withCalendar(anyToString(params!["calendar"]!))
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageLonLatUriArrivalsRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "itemsPerSchedule") != nil {
                    _ = queryBuilder.withItemsPerSchedule(anyToInt(params!["itemsPerSchedule"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "directionType") != nil {
                    if let enumValue = anyToEnum(params!["directionType"]!) as CoverageLonLatUriArrivalsRequestBuilder.DirectionType? {
                        _ = queryBuilder.withDirectionType(enumValue)
                    }
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionArrivals:)
    func coverageRegionArrivals(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionArrivalsRequestBuilder = sdk.nextArrivalsApi.newCoverageRegionArrivalsRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "fromDatetime") != nil {
                    _ = queryBuilder.withFromDatetime(anyToDateTime(params!["fromDatetime"]!))
                }
                if params?.index(forKey: "untilDatetime") != nil {
                    _ = queryBuilder.withUntilDatetime(anyToDateTime(params!["untilDatetime"]!))
                }
                if params?.index(forKey: "duration") != nil {
                    _ = queryBuilder.withDuration(anyToInt(params!["duration"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "maxDateTimes") != nil {
                    _ = queryBuilder.withMaxDateTimes(anyToInt(params!["maxDateTimes"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "calendar") != nil {
                    _ = queryBuilder.withCalendar(anyToString(params!["calendar"]!))
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageRegionArrivalsRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "itemsPerSchedule") != nil {
                    _ = queryBuilder.withItemsPerSchedule(anyToInt(params!["itemsPerSchedule"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "directionType") != nil {
                    if let enumValue = anyToEnum(params!["directionType"]!) as CoverageRegionArrivalsRequestBuilder.DirectionType? {
                        _ = queryBuilder.withDirectionType(enumValue)
                    }
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionUriArrivals:)
    func coverageRegionUriArrivals(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionUriArrivalsRequestBuilder = sdk.nextArrivalsApi.newCoverageRegionUriArrivalsRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "fromDatetime") != nil {
                    _ = queryBuilder.withFromDatetime(anyToDateTime(params!["fromDatetime"]!))
                }
                if params?.index(forKey: "untilDatetime") != nil {
                    _ = queryBuilder.withUntilDatetime(anyToDateTime(params!["untilDatetime"]!))
                }
                if params?.index(forKey: "duration") != nil {
                    _ = queryBuilder.withDuration(anyToInt(params!["duration"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "maxDateTimes") != nil {
                    _ = queryBuilder.withMaxDateTimes(anyToInt(params!["maxDateTimes"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "calendar") != nil {
                    _ = queryBuilder.withCalendar(anyToString(params!["calendar"]!))
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageRegionUriArrivalsRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "itemsPerSchedule") != nil {
                    _ = queryBuilder.withItemsPerSchedule(anyToInt(params!["itemsPerSchedule"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "directionType") != nil {
                    if let enumValue = anyToEnum(params!["directionType"]!) as CoverageRegionUriArrivalsRequestBuilder.DirectionType? {
                        _ = queryBuilder.withDirectionType(enumValue)
                    }
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatDepartures:)
    func coverageLonLatDepartures(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatDeparturesRequestBuilder = sdk.nextDeparturesApi.newCoverageLonLatDeparturesRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "fromDatetime") != nil {
                    _ = queryBuilder.withFromDatetime(anyToDateTime(params!["fromDatetime"]!))
                }
                if params?.index(forKey: "untilDatetime") != nil {
                    _ = queryBuilder.withUntilDatetime(anyToDateTime(params!["untilDatetime"]!))
                }
                if params?.index(forKey: "duration") != nil {
                    _ = queryBuilder.withDuration(anyToInt(params!["duration"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "maxDateTimes") != nil {
                    _ = queryBuilder.withMaxDateTimes(anyToInt(params!["maxDateTimes"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "calendar") != nil {
                    _ = queryBuilder.withCalendar(anyToString(params!["calendar"]!))
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageLonLatDeparturesRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "itemsPerSchedule") != nil {
                    _ = queryBuilder.withItemsPerSchedule(anyToInt(params!["itemsPerSchedule"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "directionType") != nil {
                    if let enumValue = anyToEnum(params!["directionType"]!) as CoverageLonLatDeparturesRequestBuilder.DirectionType? {
                        _ = queryBuilder.withDirectionType(enumValue)
                    }
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatUriDepartures:)
    func coverageLonLatUriDepartures(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatUriDeparturesRequestBuilder = sdk.nextDeparturesApi.newCoverageLonLatUriDeparturesRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "fromDatetime") != nil {
                    _ = queryBuilder.withFromDatetime(anyToDateTime(params!["fromDatetime"]!))
                }
                if params?.index(forKey: "untilDatetime") != nil {
                    _ = queryBuilder.withUntilDatetime(anyToDateTime(params!["untilDatetime"]!))
                }
                if params?.index(forKey: "duration") != nil {
                    _ = queryBuilder.withDuration(anyToInt(params!["duration"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "maxDateTimes") != nil {
                    _ = queryBuilder.withMaxDateTimes(anyToInt(params!["maxDateTimes"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "calendar") != nil {
                    _ = queryBuilder.withCalendar(anyToString(params!["calendar"]!))
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageLonLatUriDeparturesRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "itemsPerSchedule") != nil {
                    _ = queryBuilder.withItemsPerSchedule(anyToInt(params!["itemsPerSchedule"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "directionType") != nil {
                    if let enumValue = anyToEnum(params!["directionType"]!) as CoverageLonLatUriDeparturesRequestBuilder.DirectionType? {
                        _ = queryBuilder.withDirectionType(enumValue)
                    }
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionDepartures:)
    func coverageRegionDepartures(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionDeparturesRequestBuilder = sdk.nextDeparturesApi.newCoverageRegionDeparturesRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "fromDatetime") != nil {
                    _ = queryBuilder.withFromDatetime(anyToDateTime(params!["fromDatetime"]!))
                }
                if params?.index(forKey: "untilDatetime") != nil {
                    _ = queryBuilder.withUntilDatetime(anyToDateTime(params!["untilDatetime"]!))
                }
                if params?.index(forKey: "duration") != nil {
                    _ = queryBuilder.withDuration(anyToInt(params!["duration"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "maxDateTimes") != nil {
                    _ = queryBuilder.withMaxDateTimes(anyToInt(params!["maxDateTimes"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "calendar") != nil {
                    _ = queryBuilder.withCalendar(anyToString(params!["calendar"]!))
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageRegionDeparturesRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "itemsPerSchedule") != nil {
                    _ = queryBuilder.withItemsPerSchedule(anyToInt(params!["itemsPerSchedule"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "directionType") != nil {
                    if let enumValue = anyToEnum(params!["directionType"]!) as CoverageRegionDeparturesRequestBuilder.DirectionType? {
                        _ = queryBuilder.withDirectionType(enumValue)
                    }
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionUriDepartures:)
    func coverageRegionUriDepartures(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionUriDeparturesRequestBuilder = sdk.nextDeparturesApi.newCoverageRegionUriDeparturesRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "fromDatetime") != nil {
                    _ = queryBuilder.withFromDatetime(anyToDateTime(params!["fromDatetime"]!))
                }
                if params?.index(forKey: "untilDatetime") != nil {
                    _ = queryBuilder.withUntilDatetime(anyToDateTime(params!["untilDatetime"]!))
                }
                if params?.index(forKey: "duration") != nil {
                    _ = queryBuilder.withDuration(anyToInt(params!["duration"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "maxDateTimes") != nil {
                    _ = queryBuilder.withMaxDateTimes(anyToInt(params!["maxDateTimes"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "calendar") != nil {
                    _ = queryBuilder.withCalendar(anyToString(params!["calendar"]!))
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageRegionUriDeparturesRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "itemsPerSchedule") != nil {
                    _ = queryBuilder.withItemsPerSchedule(anyToInt(params!["itemsPerSchedule"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "directionType") != nil {
                    if let enumValue = anyToEnum(params!["directionType"]!) as CoverageRegionUriDeparturesRequestBuilder.DirectionType? {
                        _ = queryBuilder.withDirectionType(enumValue)
                    }
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatPhysicalModes:)
    func coverageLonLatPhysicalModes(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatPhysicalModesRequestBuilder = sdk.physicalModesApi.newCoverageLonLatPhysicalModesRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageLonLatPhysicalModesRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageLonLatPhysicalModesRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatPhysicalModesId:)
    func coverageLonLatPhysicalModesId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatPhysicalModesIdRequestBuilder = sdk.physicalModesApi.newCoverageLonLatPhysicalModesIdRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageLonLatPhysicalModesIdRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageLonLatPhysicalModesIdRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatUriPhysicalModes:)
    func coverageLonLatUriPhysicalModes(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatUriPhysicalModesRequestBuilder = sdk.physicalModesApi.newCoverageLonLatUriPhysicalModesRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageLonLatUriPhysicalModesRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageLonLatUriPhysicalModesRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatUriPhysicalModesId:)
    func coverageLonLatUriPhysicalModesId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatUriPhysicalModesIdRequestBuilder = sdk.physicalModesApi.newCoverageLonLatUriPhysicalModesIdRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageLonLatUriPhysicalModesIdRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageLonLatUriPhysicalModesIdRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionPhysicalModes:)
    func coverageRegionPhysicalModes(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionPhysicalModesRequestBuilder = sdk.physicalModesApi.newCoverageRegionPhysicalModesRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageRegionPhysicalModesRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageRegionPhysicalModesRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionPhysicalModesId:)
    func coverageRegionPhysicalModesId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionPhysicalModesIdRequestBuilder = sdk.physicalModesApi.newCoverageRegionPhysicalModesIdRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageRegionPhysicalModesIdRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageRegionPhysicalModesIdRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionUriPhysicalModes:)
    func coverageRegionUriPhysicalModes(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionUriPhysicalModesRequestBuilder = sdk.physicalModesApi.newCoverageRegionUriPhysicalModesRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageRegionUriPhysicalModesRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageRegionUriPhysicalModesRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionUriPhysicalModesId:)
    func coverageRegionUriPhysicalModesId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionUriPhysicalModesIdRequestBuilder = sdk.physicalModesApi.newCoverageRegionUriPhysicalModesIdRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageRegionUriPhysicalModesIdRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageRegionUriPhysicalModesIdRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatPlacesId:)
    func coverageLonLatPlacesId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatPlacesIdRequestBuilder = sdk.placeUriApi.newCoverageLonLatPlacesIdRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }
                if params?.index(forKey: "bssStands") != nil {
                    _ = queryBuilder.withBssStands(anyToBool(params!["bssStands"]!))
                }
                if params?.index(forKey: "addPoiInfos") != nil {
                    _ = queryBuilder.withAddPoiInfos(arrayToEnum(params!["addPoiInfos"]!) as [CoverageLonLatPlacesIdRequestBuilder.AddPoiInfos])
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionPlacesId:)
    func coverageRegionPlacesId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionPlacesIdRequestBuilder = sdk.placeUriApi.newCoverageRegionPlacesIdRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }
                if params?.index(forKey: "bssStands") != nil {
                    _ = queryBuilder.withBssStands(anyToBool(params!["bssStands"]!))
                }
                if params?.index(forKey: "addPoiInfos") != nil {
                    _ = queryBuilder.withAddPoiInfos(arrayToEnum(params!["addPoiInfos"]!) as [CoverageRegionPlacesIdRequestBuilder.AddPoiInfos])
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(placesId:)
    func placesId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: PlacesIdRequestBuilder = sdk.placeUriApi.newPlacesIdRequestBuilder();

                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }
                if params?.index(forKey: "bssStands") != nil {
                    _ = queryBuilder.withBssStands(anyToBool(params!["bssStands"]!))
                }
                if params?.index(forKey: "addPoiInfos") != nil {
                    _ = queryBuilder.withAddPoiInfos(arrayToEnum(params!["addPoiInfos"]!) as [PlacesIdRequestBuilder.AddPoiInfos])
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatPlaces:)
    func coverageLonLatPlaces(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatPlacesRequestBuilder = sdk.placesApi.newCoverageLonLatPlacesRequestBuilder();

                if params?.index(forKey: "q") != nil {
                    _ = queryBuilder.withQ(anyToString(params!["q"]!))
                }
                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "type") != nil {
                    _ = queryBuilder.withType(arrayToEnum(params!["type"]!) as [CoverageLonLatPlacesRequestBuilder.ModelType])
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "adminUri") != nil {
                    _ = queryBuilder.withAdminUri(arrayToStringDict(params!["adminUri"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "from") != nil {
                    _ = queryBuilder.withFrom(anyToString(params!["from"]!))
                }
                if params?.index(forKey: "shape") != nil {
                    _ = queryBuilder.withShape(anyToString(params!["shape"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionPlaces:)
    func coverageRegionPlaces(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionPlacesRequestBuilder = sdk.placesApi.newCoverageRegionPlacesRequestBuilder();

                if params?.index(forKey: "q") != nil {
                    _ = queryBuilder.withQ(anyToString(params!["q"]!))
                }
                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "type") != nil {
                    _ = queryBuilder.withType(arrayToEnum(params!["type"]!) as [CoverageRegionPlacesRequestBuilder.ModelType])
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "adminUri") != nil {
                    _ = queryBuilder.withAdminUri(arrayToStringDict(params!["adminUri"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "from") != nil {
                    _ = queryBuilder.withFrom(anyToString(params!["from"]!))
                }
                if params?.index(forKey: "shape") != nil {
                    _ = queryBuilder.withShape(anyToString(params!["shape"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(places:)
    func places(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: PlacesRequestBuilder = sdk.placesApi.newPlacesRequestBuilder();

                if params?.index(forKey: "q") != nil {
                    _ = queryBuilder.withQ(anyToString(params!["q"]!))
                }
                if params?.index(forKey: "type") != nil {
                    _ = queryBuilder.withType(arrayToEnum(params!["type"]!) as [PlacesRequestBuilder.ModelType])
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "adminUri") != nil {
                    _ = queryBuilder.withAdminUri(arrayToStringDict(params!["adminUri"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "from") != nil {
                    _ = queryBuilder.withFrom(anyToString(params!["from"]!))
                }
                if params?.index(forKey: "shape") != nil {
                    _ = queryBuilder.withShape(anyToString(params!["shape"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coordLonLatPlacesNearby:)
    func coordLonLatPlacesNearby(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoordLonLatPlacesNearbyRequestBuilder = sdk.placesNearbyApi.newCoordLonLatPlacesNearbyRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "type") != nil {
                    _ = queryBuilder.withType(arrayToEnum(params!["type"]!) as [CoordLonLatPlacesNearbyRequestBuilder.ModelType])
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "bssStands") != nil {
                    _ = queryBuilder.withBssStands(anyToBool(params!["bssStands"]!))
                }
                if params?.index(forKey: "addPoiInfos") != nil {
                    _ = queryBuilder.withAddPoiInfos(arrayToEnum(params!["addPoiInfos"]!) as [CoordLonLatPlacesNearbyRequestBuilder.AddPoiInfos])
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coordsLonLatPlacesNearby:)
    func coordsLonLatPlacesNearby(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoordsLonLatPlacesNearbyRequestBuilder = sdk.placesNearbyApi.newCoordsLonLatPlacesNearbyRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "type") != nil {
                    _ = queryBuilder.withType(arrayToEnum(params!["type"]!) as [CoordsLonLatPlacesNearbyRequestBuilder.ModelType])
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "bssStands") != nil {
                    _ = queryBuilder.withBssStands(anyToBool(params!["bssStands"]!))
                }
                if params?.index(forKey: "addPoiInfos") != nil {
                    _ = queryBuilder.withAddPoiInfos(arrayToEnum(params!["addPoiInfos"]!) as [CoordsLonLatPlacesNearbyRequestBuilder.AddPoiInfos])
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatPlacesNearby:)
    func coverageLonLatPlacesNearby(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatPlacesNearbyRequestBuilder = sdk.placesNearbyApi.newCoverageLonLatPlacesNearbyRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "type") != nil {
                    _ = queryBuilder.withType(arrayToEnum(params!["type"]!) as [CoverageLonLatPlacesNearbyRequestBuilder.ModelType])
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "bssStands") != nil {
                    _ = queryBuilder.withBssStands(anyToBool(params!["bssStands"]!))
                }
                if params?.index(forKey: "addPoiInfos") != nil {
                    _ = queryBuilder.withAddPoiInfos(arrayToEnum(params!["addPoiInfos"]!) as [CoverageLonLatPlacesNearbyRequestBuilder.AddPoiInfos])
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatUriPlacesNearby:)
    func coverageLonLatUriPlacesNearby(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatUriPlacesNearbyRequestBuilder = sdk.placesNearbyApi.newCoverageLonLatUriPlacesNearbyRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "type") != nil {
                    _ = queryBuilder.withType(arrayToEnum(params!["type"]!) as [CoverageLonLatUriPlacesNearbyRequestBuilder.ModelType])
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "bssStands") != nil {
                    _ = queryBuilder.withBssStands(anyToBool(params!["bssStands"]!))
                }
                if params?.index(forKey: "addPoiInfos") != nil {
                    _ = queryBuilder.withAddPoiInfos(arrayToEnum(params!["addPoiInfos"]!) as [CoverageLonLatUriPlacesNearbyRequestBuilder.AddPoiInfos])
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionPlacesNearby:)
    func coverageRegionPlacesNearby(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionPlacesNearbyRequestBuilder = sdk.placesNearbyApi.newCoverageRegionPlacesNearbyRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "type") != nil {
                    _ = queryBuilder.withType(arrayToEnum(params!["type"]!) as [CoverageRegionPlacesNearbyRequestBuilder.ModelType])
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "bssStands") != nil {
                    _ = queryBuilder.withBssStands(anyToBool(params!["bssStands"]!))
                }
                if params?.index(forKey: "addPoiInfos") != nil {
                    _ = queryBuilder.withAddPoiInfos(arrayToEnum(params!["addPoiInfos"]!) as [CoverageRegionPlacesNearbyRequestBuilder.AddPoiInfos])
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionUriPlacesNearby:)
    func coverageRegionUriPlacesNearby(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionUriPlacesNearbyRequestBuilder = sdk.placesNearbyApi.newCoverageRegionUriPlacesNearbyRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "type") != nil {
                    _ = queryBuilder.withType(arrayToEnum(params!["type"]!) as [CoverageRegionUriPlacesNearbyRequestBuilder.ModelType])
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "bssStands") != nil {
                    _ = queryBuilder.withBssStands(anyToBool(params!["bssStands"]!))
                }
                if params?.index(forKey: "addPoiInfos") != nil {
                    _ = queryBuilder.withAddPoiInfos(arrayToEnum(params!["addPoiInfos"]!) as [CoverageRegionUriPlacesNearbyRequestBuilder.AddPoiInfos])
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatPoiTypes:)
    func coverageLonLatPoiTypes(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatPoiTypesRequestBuilder = sdk.poiTypesApi.newCoverageLonLatPoiTypesRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageLonLatPoiTypesRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageLonLatPoiTypesRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatPoiTypesId:)
    func coverageLonLatPoiTypesId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatPoiTypesIdRequestBuilder = sdk.poiTypesApi.newCoverageLonLatPoiTypesIdRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageLonLatPoiTypesIdRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageLonLatPoiTypesIdRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatUriPoiTypes:)
    func coverageLonLatUriPoiTypes(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatUriPoiTypesRequestBuilder = sdk.poiTypesApi.newCoverageLonLatUriPoiTypesRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageLonLatUriPoiTypesRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageLonLatUriPoiTypesRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatUriPoiTypesId:)
    func coverageLonLatUriPoiTypesId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatUriPoiTypesIdRequestBuilder = sdk.poiTypesApi.newCoverageLonLatUriPoiTypesIdRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageLonLatUriPoiTypesIdRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageLonLatUriPoiTypesIdRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionPoiTypes:)
    func coverageRegionPoiTypes(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionPoiTypesRequestBuilder = sdk.poiTypesApi.newCoverageRegionPoiTypesRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageRegionPoiTypesRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageRegionPoiTypesRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionPoiTypesId:)
    func coverageRegionPoiTypesId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionPoiTypesIdRequestBuilder = sdk.poiTypesApi.newCoverageRegionPoiTypesIdRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageRegionPoiTypesIdRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageRegionPoiTypesIdRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionUriPoiTypes:)
    func coverageRegionUriPoiTypes(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionUriPoiTypesRequestBuilder = sdk.poiTypesApi.newCoverageRegionUriPoiTypesRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageRegionUriPoiTypesRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageRegionUriPoiTypesRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionUriPoiTypesId:)
    func coverageRegionUriPoiTypesId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionUriPoiTypesIdRequestBuilder = sdk.poiTypesApi.newCoverageRegionUriPoiTypesIdRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageRegionUriPoiTypesIdRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageRegionUriPoiTypesIdRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatPois:)
    func coverageLonLatPois(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatPoisRequestBuilder = sdk.poisApi.newCoverageLonLatPoisRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageLonLatPoisRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageLonLatPoisRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }
                if params?.index(forKey: "originalId") != nil {
                    _ = queryBuilder.withOriginalId(anyToString(params!["originalId"]!))
                }
                if params?.index(forKey: "bssStands") != nil {
                    _ = queryBuilder.withBssStands(anyToBool(params!["bssStands"]!))
                }
                if params?.index(forKey: "addPoiInfos") != nil {
                    _ = queryBuilder.withAddPoiInfos(arrayToEnum(params!["addPoiInfos"]!) as [CoverageLonLatPoisRequestBuilder.AddPoiInfos])
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatPoisId:)
    func coverageLonLatPoisId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatPoisIdRequestBuilder = sdk.poisApi.newCoverageLonLatPoisIdRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageLonLatPoisIdRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageLonLatPoisIdRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }
                if params?.index(forKey: "originalId") != nil {
                    _ = queryBuilder.withOriginalId(anyToString(params!["originalId"]!))
                }
                if params?.index(forKey: "bssStands") != nil {
                    _ = queryBuilder.withBssStands(anyToBool(params!["bssStands"]!))
                }
                if params?.index(forKey: "addPoiInfos") != nil {
                    _ = queryBuilder.withAddPoiInfos(arrayToEnum(params!["addPoiInfos"]!) as [CoverageLonLatPoisIdRequestBuilder.AddPoiInfos])
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatUriPois:)
    func coverageLonLatUriPois(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatUriPoisRequestBuilder = sdk.poisApi.newCoverageLonLatUriPoisRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageLonLatUriPoisRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageLonLatUriPoisRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }
                if params?.index(forKey: "originalId") != nil {
                    _ = queryBuilder.withOriginalId(anyToString(params!["originalId"]!))
                }
                if params?.index(forKey: "bssStands") != nil {
                    _ = queryBuilder.withBssStands(anyToBool(params!["bssStands"]!))
                }
                if params?.index(forKey: "addPoiInfos") != nil {
                    _ = queryBuilder.withAddPoiInfos(arrayToEnum(params!["addPoiInfos"]!) as [CoverageLonLatUriPoisRequestBuilder.AddPoiInfos])
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatUriPoisId:)
    func coverageLonLatUriPoisId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatUriPoisIdRequestBuilder = sdk.poisApi.newCoverageLonLatUriPoisIdRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageLonLatUriPoisIdRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageLonLatUriPoisIdRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }
                if params?.index(forKey: "originalId") != nil {
                    _ = queryBuilder.withOriginalId(anyToString(params!["originalId"]!))
                }
                if params?.index(forKey: "bssStands") != nil {
                    _ = queryBuilder.withBssStands(anyToBool(params!["bssStands"]!))
                }
                if params?.index(forKey: "addPoiInfos") != nil {
                    _ = queryBuilder.withAddPoiInfos(arrayToEnum(params!["addPoiInfos"]!) as [CoverageLonLatUriPoisIdRequestBuilder.AddPoiInfos])
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionPois:)
    func coverageRegionPois(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionPoisRequestBuilder = sdk.poisApi.newCoverageRegionPoisRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageRegionPoisRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageRegionPoisRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }
                if params?.index(forKey: "originalId") != nil {
                    _ = queryBuilder.withOriginalId(anyToString(params!["originalId"]!))
                }
                if params?.index(forKey: "bssStands") != nil {
                    _ = queryBuilder.withBssStands(anyToBool(params!["bssStands"]!))
                }
                if params?.index(forKey: "addPoiInfos") != nil {
                    _ = queryBuilder.withAddPoiInfos(arrayToEnum(params!["addPoiInfos"]!) as [CoverageRegionPoisRequestBuilder.AddPoiInfos])
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionPoisId:)
    func coverageRegionPoisId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionPoisIdRequestBuilder = sdk.poisApi.newCoverageRegionPoisIdRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageRegionPoisIdRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageRegionPoisIdRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }
                if params?.index(forKey: "originalId") != nil {
                    _ = queryBuilder.withOriginalId(anyToString(params!["originalId"]!))
                }
                if params?.index(forKey: "bssStands") != nil {
                    _ = queryBuilder.withBssStands(anyToBool(params!["bssStands"]!))
                }
                if params?.index(forKey: "addPoiInfos") != nil {
                    _ = queryBuilder.withAddPoiInfos(arrayToEnum(params!["addPoiInfos"]!) as [CoverageRegionPoisIdRequestBuilder.AddPoiInfos])
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionUriPois:)
    func coverageRegionUriPois(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionUriPoisRequestBuilder = sdk.poisApi.newCoverageRegionUriPoisRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageRegionUriPoisRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageRegionUriPoisRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }
                if params?.index(forKey: "originalId") != nil {
                    _ = queryBuilder.withOriginalId(anyToString(params!["originalId"]!))
                }
                if params?.index(forKey: "bssStands") != nil {
                    _ = queryBuilder.withBssStands(anyToBool(params!["bssStands"]!))
                }
                if params?.index(forKey: "addPoiInfos") != nil {
                    _ = queryBuilder.withAddPoiInfos(arrayToEnum(params!["addPoiInfos"]!) as [CoverageRegionUriPoisRequestBuilder.AddPoiInfos])
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionUriPoisId:)
    func coverageRegionUriPoisId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionUriPoisIdRequestBuilder = sdk.poisApi.newCoverageRegionUriPoisIdRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageRegionUriPoisIdRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageRegionUriPoisIdRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }
                if params?.index(forKey: "originalId") != nil {
                    _ = queryBuilder.withOriginalId(anyToString(params!["originalId"]!))
                }
                if params?.index(forKey: "bssStands") != nil {
                    _ = queryBuilder.withBssStands(anyToBool(params!["bssStands"]!))
                }
                if params?.index(forKey: "addPoiInfos") != nil {
                    _ = queryBuilder.withAddPoiInfos(arrayToEnum(params!["addPoiInfos"]!) as [CoverageRegionUriPoisIdRequestBuilder.AddPoiInfos])
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatPtObjects:)
    func coverageLonLatPtObjects(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatPtObjectsRequestBuilder = sdk.ptobjectsApi.newCoverageLonLatPtObjectsRequestBuilder();

                if params?.index(forKey: "q") != nil {
                    _ = queryBuilder.withQ(anyToString(params!["q"]!))
                }
                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "type") != nil {
                    _ = queryBuilder.withType(arrayToEnum(params!["type"]!) as [CoverageLonLatPtObjectsRequestBuilder.ModelType])
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "adminUri") != nil {
                    _ = queryBuilder.withAdminUri(arrayToStringDict(params!["adminUri"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionPtObjects:)
    func coverageRegionPtObjects(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionPtObjectsRequestBuilder = sdk.ptobjectsApi.newCoverageRegionPtObjectsRequestBuilder();

                if params?.index(forKey: "q") != nil {
                    _ = queryBuilder.withQ(anyToString(params!["q"]!))
                }
                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "type") != nil {
                    _ = queryBuilder.withType(arrayToEnum(params!["type"]!) as [CoverageRegionPtObjectsRequestBuilder.ModelType])
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "adminUri") != nil {
                    _ = queryBuilder.withAdminUri(arrayToStringDict(params!["adminUri"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatUriRouteSchedules:)
    func coverageLonLatUriRouteSchedules(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatUriRouteSchedulesRequestBuilder = sdk.routeSchedulesApi.newCoverageLonLatUriRouteSchedulesRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "fromDatetime") != nil {
                    _ = queryBuilder.withFromDatetime(anyToDateTime(params!["fromDatetime"]!))
                }
                if params?.index(forKey: "untilDatetime") != nil {
                    _ = queryBuilder.withUntilDatetime(anyToDateTime(params!["untilDatetime"]!))
                }
                if params?.index(forKey: "duration") != nil {
                    _ = queryBuilder.withDuration(anyToInt(params!["duration"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "maxDateTimes") != nil {
                    _ = queryBuilder.withMaxDateTimes(anyToInt(params!["maxDateTimes"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "calendar") != nil {
                    _ = queryBuilder.withCalendar(anyToString(params!["calendar"]!))
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageLonLatUriRouteSchedulesRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "itemsPerSchedule") != nil {
                    _ = queryBuilder.withItemsPerSchedule(anyToInt(params!["itemsPerSchedule"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "directionType") != nil {
                    if let enumValue = anyToEnum(params!["directionType"]!) as CoverageLonLatUriRouteSchedulesRequestBuilder.DirectionType? {
                        _ = queryBuilder.withDirectionType(enumValue)
                    }
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionUriRouteSchedules:)
    func coverageRegionUriRouteSchedules(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionUriRouteSchedulesRequestBuilder = sdk.routeSchedulesApi.newCoverageRegionUriRouteSchedulesRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "fromDatetime") != nil {
                    _ = queryBuilder.withFromDatetime(anyToDateTime(params!["fromDatetime"]!))
                }
                if params?.index(forKey: "untilDatetime") != nil {
                    _ = queryBuilder.withUntilDatetime(anyToDateTime(params!["untilDatetime"]!))
                }
                if params?.index(forKey: "duration") != nil {
                    _ = queryBuilder.withDuration(anyToInt(params!["duration"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "maxDateTimes") != nil {
                    _ = queryBuilder.withMaxDateTimes(anyToInt(params!["maxDateTimes"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "calendar") != nil {
                    _ = queryBuilder.withCalendar(anyToString(params!["calendar"]!))
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageRegionUriRouteSchedulesRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "itemsPerSchedule") != nil {
                    _ = queryBuilder.withItemsPerSchedule(anyToInt(params!["itemsPerSchedule"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "directionType") != nil {
                    if let enumValue = anyToEnum(params!["directionType"]!) as CoverageRegionUriRouteSchedulesRequestBuilder.DirectionType? {
                        _ = queryBuilder.withDirectionType(enumValue)
                    }
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(routeSchedules:)
    func routeSchedules(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: RouteSchedulesRequestBuilder = sdk.routeSchedulesApi.newRouteSchedulesRequestBuilder();

                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "fromDatetime") != nil {
                    _ = queryBuilder.withFromDatetime(anyToDateTime(params!["fromDatetime"]!))
                }
                if params?.index(forKey: "untilDatetime") != nil {
                    _ = queryBuilder.withUntilDatetime(anyToDateTime(params!["untilDatetime"]!))
                }
                if params?.index(forKey: "duration") != nil {
                    _ = queryBuilder.withDuration(anyToInt(params!["duration"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "maxDateTimes") != nil {
                    _ = queryBuilder.withMaxDateTimes(anyToInt(params!["maxDateTimes"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "calendar") != nil {
                    _ = queryBuilder.withCalendar(anyToString(params!["calendar"]!))
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as RouteSchedulesRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "itemsPerSchedule") != nil {
                    _ = queryBuilder.withItemsPerSchedule(anyToInt(params!["itemsPerSchedule"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "directionType") != nil {
                    if let enumValue = anyToEnum(params!["directionType"]!) as RouteSchedulesRequestBuilder.DirectionType? {
                        _ = queryBuilder.withDirectionType(enumValue)
                    }
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatRoutes:)
    func coverageLonLatRoutes(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatRoutesRequestBuilder = sdk.routesApi.newCoverageLonLatRoutesRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageLonLatRoutesRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageLonLatRoutesRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }
                if params?.index(forKey: "originalId") != nil {
                    _ = queryBuilder.withOriginalId(anyToString(params!["originalId"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatRoutesId:)
    func coverageLonLatRoutesId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatRoutesIdRequestBuilder = sdk.routesApi.newCoverageLonLatRoutesIdRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageLonLatRoutesIdRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageLonLatRoutesIdRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }
                if params?.index(forKey: "originalId") != nil {
                    _ = queryBuilder.withOriginalId(anyToString(params!["originalId"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatUriRoutes:)
    func coverageLonLatUriRoutes(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatUriRoutesRequestBuilder = sdk.routesApi.newCoverageLonLatUriRoutesRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageLonLatUriRoutesRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageLonLatUriRoutesRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }
                if params?.index(forKey: "originalId") != nil {
                    _ = queryBuilder.withOriginalId(anyToString(params!["originalId"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatUriRoutesId:)
    func coverageLonLatUriRoutesId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatUriRoutesIdRequestBuilder = sdk.routesApi.newCoverageLonLatUriRoutesIdRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageLonLatUriRoutesIdRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageLonLatUriRoutesIdRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }
                if params?.index(forKey: "originalId") != nil {
                    _ = queryBuilder.withOriginalId(anyToString(params!["originalId"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionRoutes:)
    func coverageRegionRoutes(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionRoutesRequestBuilder = sdk.routesApi.newCoverageRegionRoutesRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageRegionRoutesRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageRegionRoutesRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }
                if params?.index(forKey: "originalId") != nil {
                    _ = queryBuilder.withOriginalId(anyToString(params!["originalId"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionRoutesId:)
    func coverageRegionRoutesId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionRoutesIdRequestBuilder = sdk.routesApi.newCoverageRegionRoutesIdRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageRegionRoutesIdRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageRegionRoutesIdRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }
                if params?.index(forKey: "originalId") != nil {
                    _ = queryBuilder.withOriginalId(anyToString(params!["originalId"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionUriRoutes:)
    func coverageRegionUriRoutes(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionUriRoutesRequestBuilder = sdk.routesApi.newCoverageRegionUriRoutesRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageRegionUriRoutesRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageRegionUriRoutesRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }
                if params?.index(forKey: "originalId") != nil {
                    _ = queryBuilder.withOriginalId(anyToString(params!["originalId"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionUriRoutesId:)
    func coverageRegionUriRoutesId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionUriRoutesIdRequestBuilder = sdk.routesApi.newCoverageRegionUriRoutesIdRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageRegionUriRoutesIdRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageRegionUriRoutesIdRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }
                if params?.index(forKey: "originalId") != nil {
                    _ = queryBuilder.withOriginalId(anyToString(params!["originalId"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(routes:)
    func routes(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: RoutesRequestBuilder = sdk.routesApi.newRoutesRequestBuilder();

                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as RoutesRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as RoutesRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }
                if params?.index(forKey: "originalId") != nil {
                    _ = queryBuilder.withOriginalId(anyToString(params!["originalId"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatStopAreas:)
    func coverageLonLatStopAreas(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatStopAreasRequestBuilder = sdk.stopAreasApi.newCoverageLonLatStopAreasRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageLonLatStopAreasRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageLonLatStopAreasRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }
                if params?.index(forKey: "originalId") != nil {
                    _ = queryBuilder.withOriginalId(anyToString(params!["originalId"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatStopAreasId:)
    func coverageLonLatStopAreasId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatStopAreasIdRequestBuilder = sdk.stopAreasApi.newCoverageLonLatStopAreasIdRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageLonLatStopAreasIdRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageLonLatStopAreasIdRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }
                if params?.index(forKey: "originalId") != nil {
                    _ = queryBuilder.withOriginalId(anyToString(params!["originalId"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatUriStopAreas:)
    func coverageLonLatUriStopAreas(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatUriStopAreasRequestBuilder = sdk.stopAreasApi.newCoverageLonLatUriStopAreasRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageLonLatUriStopAreasRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageLonLatUriStopAreasRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }
                if params?.index(forKey: "originalId") != nil {
                    _ = queryBuilder.withOriginalId(anyToString(params!["originalId"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatUriStopAreasId:)
    func coverageLonLatUriStopAreasId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatUriStopAreasIdRequestBuilder = sdk.stopAreasApi.newCoverageLonLatUriStopAreasIdRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageLonLatUriStopAreasIdRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageLonLatUriStopAreasIdRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }
                if params?.index(forKey: "originalId") != nil {
                    _ = queryBuilder.withOriginalId(anyToString(params!["originalId"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionStopAreas:)
    func coverageRegionStopAreas(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionStopAreasRequestBuilder = sdk.stopAreasApi.newCoverageRegionStopAreasRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageRegionStopAreasRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageRegionStopAreasRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }
                if params?.index(forKey: "originalId") != nil {
                    _ = queryBuilder.withOriginalId(anyToString(params!["originalId"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionStopAreasId:)
    func coverageRegionStopAreasId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionStopAreasIdRequestBuilder = sdk.stopAreasApi.newCoverageRegionStopAreasIdRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageRegionStopAreasIdRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageRegionStopAreasIdRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }
                if params?.index(forKey: "originalId") != nil {
                    _ = queryBuilder.withOriginalId(anyToString(params!["originalId"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionUriStopAreas:)
    func coverageRegionUriStopAreas(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionUriStopAreasRequestBuilder = sdk.stopAreasApi.newCoverageRegionUriStopAreasRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageRegionUriStopAreasRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageRegionUriStopAreasRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }
                if params?.index(forKey: "originalId") != nil {
                    _ = queryBuilder.withOriginalId(anyToString(params!["originalId"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionUriStopAreasId:)
    func coverageRegionUriStopAreasId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionUriStopAreasIdRequestBuilder = sdk.stopAreasApi.newCoverageRegionUriStopAreasIdRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageRegionUriStopAreasIdRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageRegionUriStopAreasIdRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }
                if params?.index(forKey: "originalId") != nil {
                    _ = queryBuilder.withOriginalId(anyToString(params!["originalId"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(stopAreas:)
    func stopAreas(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: StopAreasRequestBuilder = sdk.stopAreasApi.newStopAreasRequestBuilder();

                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as StopAreasRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as StopAreasRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }
                if params?.index(forKey: "originalId") != nil {
                    _ = queryBuilder.withOriginalId(anyToString(params!["originalId"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatStopPoints:)
    func coverageLonLatStopPoints(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatStopPointsRequestBuilder = sdk.stopPointsApi.newCoverageLonLatStopPointsRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageLonLatStopPointsRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageLonLatStopPointsRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }
                if params?.index(forKey: "originalId") != nil {
                    _ = queryBuilder.withOriginalId(anyToString(params!["originalId"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatStopPointsId:)
    func coverageLonLatStopPointsId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatStopPointsIdRequestBuilder = sdk.stopPointsApi.newCoverageLonLatStopPointsIdRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageLonLatStopPointsIdRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageLonLatStopPointsIdRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }
                if params?.index(forKey: "originalId") != nil {
                    _ = queryBuilder.withOriginalId(anyToString(params!["originalId"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatUriStopPoints:)
    func coverageLonLatUriStopPoints(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatUriStopPointsRequestBuilder = sdk.stopPointsApi.newCoverageLonLatUriStopPointsRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageLonLatUriStopPointsRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageLonLatUriStopPointsRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }
                if params?.index(forKey: "originalId") != nil {
                    _ = queryBuilder.withOriginalId(anyToString(params!["originalId"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatUriStopPointsId:)
    func coverageLonLatUriStopPointsId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatUriStopPointsIdRequestBuilder = sdk.stopPointsApi.newCoverageLonLatUriStopPointsIdRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageLonLatUriStopPointsIdRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageLonLatUriStopPointsIdRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }
                if params?.index(forKey: "originalId") != nil {
                    _ = queryBuilder.withOriginalId(anyToString(params!["originalId"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionStopPoints:)
    func coverageRegionStopPoints(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionStopPointsRequestBuilder = sdk.stopPointsApi.newCoverageRegionStopPointsRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageRegionStopPointsRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageRegionStopPointsRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }
                if params?.index(forKey: "originalId") != nil {
                    _ = queryBuilder.withOriginalId(anyToString(params!["originalId"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionStopPointsId:)
    func coverageRegionStopPointsId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionStopPointsIdRequestBuilder = sdk.stopPointsApi.newCoverageRegionStopPointsIdRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageRegionStopPointsIdRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageRegionStopPointsIdRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }
                if params?.index(forKey: "originalId") != nil {
                    _ = queryBuilder.withOriginalId(anyToString(params!["originalId"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionUriStopPoints:)
    func coverageRegionUriStopPoints(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionUriStopPointsRequestBuilder = sdk.stopPointsApi.newCoverageRegionUriStopPointsRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageRegionUriStopPointsRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageRegionUriStopPointsRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }
                if params?.index(forKey: "originalId") != nil {
                    _ = queryBuilder.withOriginalId(anyToString(params!["originalId"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionUriStopPointsId:)
    func coverageRegionUriStopPointsId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionUriStopPointsIdRequestBuilder = sdk.stopPointsApi.newCoverageRegionUriStopPointsIdRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageRegionUriStopPointsIdRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageRegionUriStopPointsIdRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }
                if params?.index(forKey: "originalId") != nil {
                    _ = queryBuilder.withOriginalId(anyToString(params!["originalId"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(stopPoints:)
    func stopPoints(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: StopPointsRequestBuilder = sdk.stopPointsApi.newStopPointsRequestBuilder();

                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as StopPointsRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as StopPointsRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }
                if params?.index(forKey: "originalId") != nil {
                    _ = queryBuilder.withOriginalId(anyToString(params!["originalId"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatUriStopSchedules:)
    func coverageLonLatUriStopSchedules(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatUriStopSchedulesRequestBuilder = sdk.stopSchedulesApi.newCoverageLonLatUriStopSchedulesRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "fromDatetime") != nil {
                    _ = queryBuilder.withFromDatetime(anyToDateTime(params!["fromDatetime"]!))
                }
                if params?.index(forKey: "untilDatetime") != nil {
                    _ = queryBuilder.withUntilDatetime(anyToDateTime(params!["untilDatetime"]!))
                }
                if params?.index(forKey: "duration") != nil {
                    _ = queryBuilder.withDuration(anyToInt(params!["duration"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "maxDateTimes") != nil {
                    _ = queryBuilder.withMaxDateTimes(anyToInt(params!["maxDateTimes"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "calendar") != nil {
                    _ = queryBuilder.withCalendar(anyToString(params!["calendar"]!))
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageLonLatUriStopSchedulesRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "itemsPerSchedule") != nil {
                    _ = queryBuilder.withItemsPerSchedule(anyToInt(params!["itemsPerSchedule"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "directionType") != nil {
                    if let enumValue = anyToEnum(params!["directionType"]!) as CoverageLonLatUriStopSchedulesRequestBuilder.DirectionType? {
                        _ = queryBuilder.withDirectionType(enumValue)
                    }
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionUriStopSchedules:)
    func coverageRegionUriStopSchedules(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionUriStopSchedulesRequestBuilder = sdk.stopSchedulesApi.newCoverageRegionUriStopSchedulesRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "fromDatetime") != nil {
                    _ = queryBuilder.withFromDatetime(anyToDateTime(params!["fromDatetime"]!))
                }
                if params?.index(forKey: "untilDatetime") != nil {
                    _ = queryBuilder.withUntilDatetime(anyToDateTime(params!["untilDatetime"]!))
                }
                if params?.index(forKey: "duration") != nil {
                    _ = queryBuilder.withDuration(anyToInt(params!["duration"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "maxDateTimes") != nil {
                    _ = queryBuilder.withMaxDateTimes(anyToInt(params!["maxDateTimes"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "calendar") != nil {
                    _ = queryBuilder.withCalendar(anyToString(params!["calendar"]!))
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageRegionUriStopSchedulesRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "itemsPerSchedule") != nil {
                    _ = queryBuilder.withItemsPerSchedule(anyToInt(params!["itemsPerSchedule"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "directionType") != nil {
                    if let enumValue = anyToEnum(params!["directionType"]!) as CoverageRegionUriStopSchedulesRequestBuilder.DirectionType? {
                        _ = queryBuilder.withDirectionType(enumValue)
                    }
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(stopSchedules:)
    func stopSchedules(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: StopSchedulesRequestBuilder = sdk.stopSchedulesApi.newStopSchedulesRequestBuilder();

                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "fromDatetime") != nil {
                    _ = queryBuilder.withFromDatetime(anyToDateTime(params!["fromDatetime"]!))
                }
                if params?.index(forKey: "untilDatetime") != nil {
                    _ = queryBuilder.withUntilDatetime(anyToDateTime(params!["untilDatetime"]!))
                }
                if params?.index(forKey: "duration") != nil {
                    _ = queryBuilder.withDuration(anyToInt(params!["duration"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "maxDateTimes") != nil {
                    _ = queryBuilder.withMaxDateTimes(anyToInt(params!["maxDateTimes"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "calendar") != nil {
                    _ = queryBuilder.withCalendar(anyToString(params!["calendar"]!))
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as StopSchedulesRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "itemsPerSchedule") != nil {
                    _ = queryBuilder.withItemsPerSchedule(anyToInt(params!["itemsPerSchedule"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "directionType") != nil {
                    if let enumValue = anyToEnum(params!["directionType"]!) as StopSchedulesRequestBuilder.DirectionType? {
                        _ = queryBuilder.withDirectionType(enumValue)
                    }
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatUriTerminusSchedules:)
    func coverageLonLatUriTerminusSchedules(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatUriTerminusSchedulesRequestBuilder = sdk.terminusSchedulesApi.newCoverageLonLatUriTerminusSchedulesRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "fromDatetime") != nil {
                    _ = queryBuilder.withFromDatetime(anyToDateTime(params!["fromDatetime"]!))
                }
                if params?.index(forKey: "untilDatetime") != nil {
                    _ = queryBuilder.withUntilDatetime(anyToDateTime(params!["untilDatetime"]!))
                }
                if params?.index(forKey: "duration") != nil {
                    _ = queryBuilder.withDuration(anyToInt(params!["duration"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "maxDateTimes") != nil {
                    _ = queryBuilder.withMaxDateTimes(anyToInt(params!["maxDateTimes"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "calendar") != nil {
                    _ = queryBuilder.withCalendar(anyToString(params!["calendar"]!))
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageLonLatUriTerminusSchedulesRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "itemsPerSchedule") != nil {
                    _ = queryBuilder.withItemsPerSchedule(anyToInt(params!["itemsPerSchedule"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "directionType") != nil {
                    if let enumValue = anyToEnum(params!["directionType"]!) as CoverageLonLatUriTerminusSchedulesRequestBuilder.DirectionType? {
                        _ = queryBuilder.withDirectionType(enumValue)
                    }
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionUriTerminusSchedules:)
    func coverageRegionUriTerminusSchedules(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionUriTerminusSchedulesRequestBuilder = sdk.terminusSchedulesApi.newCoverageRegionUriTerminusSchedulesRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "fromDatetime") != nil {
                    _ = queryBuilder.withFromDatetime(anyToDateTime(params!["fromDatetime"]!))
                }
                if params?.index(forKey: "untilDatetime") != nil {
                    _ = queryBuilder.withUntilDatetime(anyToDateTime(params!["untilDatetime"]!))
                }
                if params?.index(forKey: "duration") != nil {
                    _ = queryBuilder.withDuration(anyToInt(params!["duration"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "maxDateTimes") != nil {
                    _ = queryBuilder.withMaxDateTimes(anyToInt(params!["maxDateTimes"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "calendar") != nil {
                    _ = queryBuilder.withCalendar(anyToString(params!["calendar"]!))
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageRegionUriTerminusSchedulesRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "itemsPerSchedule") != nil {
                    _ = queryBuilder.withItemsPerSchedule(anyToInt(params!["itemsPerSchedule"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "directionType") != nil {
                    if let enumValue = anyToEnum(params!["directionType"]!) as CoverageRegionUriTerminusSchedulesRequestBuilder.DirectionType? {
                        _ = queryBuilder.withDirectionType(enumValue)
                    }
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(terminusSchedules:)
    func terminusSchedules(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: TerminusSchedulesRequestBuilder = sdk.terminusSchedulesApi.newTerminusSchedulesRequestBuilder();

                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "fromDatetime") != nil {
                    _ = queryBuilder.withFromDatetime(anyToDateTime(params!["fromDatetime"]!))
                }
                if params?.index(forKey: "untilDatetime") != nil {
                    _ = queryBuilder.withUntilDatetime(anyToDateTime(params!["untilDatetime"]!))
                }
                if params?.index(forKey: "duration") != nil {
                    _ = queryBuilder.withDuration(anyToInt(params!["duration"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "maxDateTimes") != nil {
                    _ = queryBuilder.withMaxDateTimes(anyToInt(params!["maxDateTimes"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "calendar") != nil {
                    _ = queryBuilder.withCalendar(anyToString(params!["calendar"]!))
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as TerminusSchedulesRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "itemsPerSchedule") != nil {
                    _ = queryBuilder.withItemsPerSchedule(anyToInt(params!["itemsPerSchedule"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "directionType") != nil {
                    if let enumValue = anyToEnum(params!["directionType"]!) as TerminusSchedulesRequestBuilder.DirectionType? {
                        _ = queryBuilder.withDirectionType(enumValue)
                    }
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatTrafficReports:)
    func coverageLonLatTrafficReports(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatTrafficReportsRequestBuilder = sdk.trafficReportApi.newCoverageLonLatTrafficReportsRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatUriTrafficReports:)
    func coverageLonLatUriTrafficReports(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatUriTrafficReportsRequestBuilder = sdk.trafficReportApi.newCoverageLonLatUriTrafficReportsRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionTrafficReports:)
    func coverageRegionTrafficReports(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionTrafficReportsRequestBuilder = sdk.trafficReportApi.newCoverageRegionTrafficReportsRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionUriTrafficReports:)
    func coverageRegionUriTrafficReports(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionUriTrafficReportsRequestBuilder = sdk.trafficReportApi.newCoverageRegionUriTrafficReportsRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatTrips:)
    func coverageLonLatTrips(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatTripsRequestBuilder = sdk.tripsApi.newCoverageLonLatTripsRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageLonLatTripsRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageLonLatTripsRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatTripsId:)
    func coverageLonLatTripsId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatTripsIdRequestBuilder = sdk.tripsApi.newCoverageLonLatTripsIdRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageLonLatTripsIdRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageLonLatTripsIdRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatUriTrips:)
    func coverageLonLatUriTrips(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatUriTripsRequestBuilder = sdk.tripsApi.newCoverageLonLatUriTripsRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageLonLatUriTripsRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageLonLatUriTripsRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatUriTripsId:)
    func coverageLonLatUriTripsId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatUriTripsIdRequestBuilder = sdk.tripsApi.newCoverageLonLatUriTripsIdRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageLonLatUriTripsIdRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageLonLatUriTripsIdRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionTrips:)
    func coverageRegionTrips(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionTripsRequestBuilder = sdk.tripsApi.newCoverageRegionTripsRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageRegionTripsRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageRegionTripsRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionTripsId:)
    func coverageRegionTripsId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionTripsIdRequestBuilder = sdk.tripsApi.newCoverageRegionTripsIdRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageRegionTripsIdRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageRegionTripsIdRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionUriTrips:)
    func coverageRegionUriTrips(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionUriTripsRequestBuilder = sdk.tripsApi.newCoverageRegionUriTripsRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageRegionUriTripsRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageRegionUriTripsRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionUriTripsId:)
    func coverageRegionUriTripsId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionUriTripsIdRequestBuilder = sdk.tripsApi.newCoverageRegionUriTripsIdRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageRegionUriTripsIdRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageRegionUriTripsIdRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatUriVehicleJourneys:)
    func coverageLonLatUriVehicleJourneys(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatUriVehicleJourneysRequestBuilder = sdk.vehicleJourneysApi.newCoverageLonLatUriVehicleJourneysRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageLonLatUriVehicleJourneysRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageLonLatUriVehicleJourneysRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatUriVehicleJourneysId:)
    func coverageLonLatUriVehicleJourneysId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatUriVehicleJourneysIdRequestBuilder = sdk.vehicleJourneysApi.newCoverageLonLatUriVehicleJourneysIdRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageLonLatUriVehicleJourneysIdRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageLonLatUriVehicleJourneysIdRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatVehicleJourneys:)
    func coverageLonLatVehicleJourneys(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatVehicleJourneysRequestBuilder = sdk.vehicleJourneysApi.newCoverageLonLatVehicleJourneysRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageLonLatVehicleJourneysRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageLonLatVehicleJourneysRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageLonLatVehicleJourneysId:)
    func coverageLonLatVehicleJourneysId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageLonLatVehicleJourneysIdRequestBuilder = sdk.vehicleJourneysApi.newCoverageLonLatVehicleJourneysIdRequestBuilder();

                if params?.index(forKey: "lat") != nil {
                    _ = queryBuilder.withLat(anyToDouble(params!["lat"]!))
                }
                if params?.index(forKey: "lon") != nil {
                    _ = queryBuilder.withLon(anyToDouble(params!["lon"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageLonLatVehicleJourneysIdRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageLonLatVehicleJourneysIdRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionUriVehicleJourneys:)
    func coverageRegionUriVehicleJourneys(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionUriVehicleJourneysRequestBuilder = sdk.vehicleJourneysApi.newCoverageRegionUriVehicleJourneysRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageRegionUriVehicleJourneysRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageRegionUriVehicleJourneysRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionUriVehicleJourneysId:)
    func coverageRegionUriVehicleJourneysId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionUriVehicleJourneysIdRequestBuilder = sdk.vehicleJourneysApi.newCoverageRegionUriVehicleJourneysIdRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "uri") != nil {
                    _ = queryBuilder.withUri(anyToString(params!["uri"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageRegionUriVehicleJourneysIdRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageRegionUriVehicleJourneysIdRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionVehicleJourneys:)
    func coverageRegionVehicleJourneys(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionVehicleJourneysRequestBuilder = sdk.vehicleJourneysApi.newCoverageRegionVehicleJourneysRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageRegionVehicleJourneysRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageRegionVehicleJourneysRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(coverageRegionVehicleJourneysId:)
    func coverageRegionVehicleJourneysId(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: CoverageRegionVehicleJourneysIdRequestBuilder = sdk.vehicleJourneysApi.newCoverageRegionVehicleJourneysIdRequestBuilder();

                if params?.index(forKey: "region") != nil {
                    _ = queryBuilder.withRegion(anyToString(params!["region"]!))
                }
                if params?.index(forKey: "id") != nil {
                    _ = queryBuilder.withId(anyToString(params!["id"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as CoverageRegionVehicleJourneysIdRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as CoverageRegionVehicleJourneysIdRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
    @objc(vehicleJourneys:)
    func vehicleJourneys(command: CDVInvokedUrlCommand) {
        let params = command.arguments[0] as? [String : Any]

        if params == nil || params?.count == 0 {
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: "Wrong parameters")
            self.commandDelegate!.send(
                pluginResult,
                callbackId: command.callbackId
            )
        } else {
            if let sdk = self.sdk {
                let queryBuilder: VehicleJourneysRequestBuilder = sdk.vehicleJourneysApi.newVehicleJourneysRequestBuilder();

                if params?.index(forKey: "externalCode") != nil {
                    _ = queryBuilder.withExternalCode(anyToString(params!["externalCode"]!))
                }
                if params?.index(forKey: "startPage") != nil {
                    _ = queryBuilder.withStartPage(anyToInt(params!["startPage"]!))
                }
                if params?.index(forKey: "count") != nil {
                    _ = queryBuilder.withCount(anyToInt(params!["count"]!))
                }
                if params?.index(forKey: "depth") != nil {
                    _ = queryBuilder.withDepth(anyToInt(params!["depth"]!))
                }
                if params?.index(forKey: "forbiddenId") != nil {
                    _ = queryBuilder.withForbiddenId(arrayToStringDict(params!["forbiddenId"]!))
                }
                if params?.index(forKey: "forbiddenUris") != nil {
                    _ = queryBuilder.withForbiddenUris(arrayToStringDict(params!["forbiddenUris"]!))
                }
                if params?.index(forKey: "headsign") != nil {
                    _ = queryBuilder.withHeadsign(anyToString(params!["headsign"]!))
                }
                if params?.index(forKey: "showCodes") != nil {
                    _ = queryBuilder.withShowCodes(anyToBool(params!["showCodes"]!))
                }
                if params?.index(forKey: "odtLevel") != nil {
                    if let enumValue = anyToEnum(params!["odtLevel"]!) as VehicleJourneysRequestBuilder.OdtLevel? {
                        _ = queryBuilder.withOdtLevel(enumValue)
                    }
                }
                if params?.index(forKey: "dataFreshness") != nil {
                    if let enumValue = anyToEnum(params!["dataFreshness"]!) as VehicleJourneysRequestBuilder.DataFreshness? {
                        _ = queryBuilder.withDataFreshness(enumValue)
                    }
                }
                if params?.index(forKey: "distance") != nil {
                    _ = queryBuilder.withDistance(anyToInt(params!["distance"]!))
                }
                if params?.index(forKey: "since") != nil {
                    _ = queryBuilder.withSince(anyToDateTime(params!["since"]!))
                }
                if params?.index(forKey: "until") != nil {
                    _ = queryBuilder.withUntil(anyToDateTime(params!["until"]!))
                }
                if params?.index(forKey: "disableGeojson") != nil {
                    _ = queryBuilder.withDisableGeojson(anyToBool(params!["disableGeojson"]!))
                }
                if params?.index(forKey: "disableDisruption") != nil {
                    _ = queryBuilder.withDisableDisruption(anyToBool(params!["disableDisruption"]!))
                }
                if params?.index(forKey: "filter") != nil {
                    _ = queryBuilder.withFilter(anyToString(params!["filter"]!))
                }
                if params?.index(forKey: "tags") != nil {
                    _ = queryBuilder.withTags(arrayToStringDict(params!["tags"]!))
                }

                queryBuilder.rawGet(completion: { results, error in
                    var pluginResult: CDVPluginResult? = nil

                    if error == nil {
                        NSLog(String(format: "SDK journeys with query %@", queryBuilder.makeUrl()))
                        let jsonData = results?.data(using: String.Encoding.utf8)
                        if jsonData != nil {
                            do {
                                let jsonResults = try JSONSerialization.jsonObject(with: jsonData!, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String : Any]
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: jsonResults)
                            } catch {
                                pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error.localizedDescription)
                            }
                        }
                    } else {
                        NSLog(String(format: "SDK journeys fail with query %@", queryBuilder.makeUrl()))
                        pluginResult = CDVPluginResult(status: CDVCommandStatus_ERROR, messageAs: error!.localizedDescription)
                    }

                    self.commandDelegate!.send(pluginResult, callbackId: command.callbackId)
                })
            }
        }
    }
}
